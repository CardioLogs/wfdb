<!-- manual page source format generated by RosettaMan v3.0a4, -->
<!-- available via anonymous ftp from ftp.cs.berkeley.edu:/ucb/people/phelps/tcltk/rman.tar.Z -->

<HTML>
<HEAD>
<TITLE>xview(7)</TITLE>
</HEAD>
<BODY bgcolor="#FFFFFF">
<A HREF="#toc">Table of Contents</A><P>

<H2><A NAME="sect0" HREF="#toc0">NAME</A></H2>
xview - xview toolkit information 
<H2><A NAME="sect1" HREF="#toc1">SYNOPSIS</A></H2>
There is no <B>xview </B> command 
per se, but this manual page will briefly describe XView features and 
functions. 
<H2><A NAME="sect2" HREF="#toc2">AVAILABILITY</A></H2>
XView is available with the OpenWindows distribution. 

<H2><A NAME="sect3" HREF="#toc3">DESCRIPTION</A></H2>
<B>XView</B> (X Window-System-based Visual/Integrated Environment for 
Workstations) is an Open Look user-interface toolkit which supports development 
of interactive, graphics-based  applications running under the X Window 
System. For detailed information  see the <I>XView</I> Programming Manual and 
the  <I>XView</I> Reference Manual. 
<H2><A NAME="sect4" HREF="#toc4">USAGE</A></H2>
<P>

<H3><A NAME="sect5" HREF="#toc5">Compiling XView Programs</A></H3>
XView programs 
are compiled with the following command line: <P>
<B>cc</B> <I>sourcefile.c</I> <B>-o</B> <I>outputfile</I> 
<B>-lxview</B> <B>-lolgx</B> <B>-lX11</B> <P>

<H3><A NAME="sect6" HREF="#toc6">Generic XView Functions</A></H3>
<P>

<DL>

<DT><B>xv_init()</B> </DT>
<DD>Establishes the connection 
to the server, initializes the Notifier and the Defaults/Resource-Manager 
database, loads the Server Resource-Manager database, reads any passed 
attributes, and installs a default X11 Errorhandler. <BR>
Xv_Server<BR>
 xv_init(LBattrs)<BR>
 
    &lt;<I>attribute-value list</I>&gt; LBattrs;<BR>
 <P>
Note: <B>attrs</B> is a NULL terminated attribute-value 
list. </DD>

<DT><B>xv_create()</B> </DT>
<DD>Creates an object. <BR>
Xv_object<BR>
 xv_create(owner, package, 
LBattrs)<BR>
     Xv_object      owner;<BR>
     Xv_pkg         package;<BR>
     &lt;<I>attribute-value 
list</I>&gt; LBattrs;<BR>
 </DD>

<DT><B>xv_destroy()</B> </DT>
<DD>Destroys an object. <BR>
int<BR>
 xv_destroy(object)
<BR>
  
   Xv_opaque object;<BR>
 <P>
</DD>

<DT><B>xv_find()</B> </DT>
<DD>Finds an object that meets certain criteria; 
or if the object doesn't exist, creates it (default behavior which can 
be defeated using XV_AUTO_CREATE, FALSE). <BR>
Xv_opaque<BR>
 xv_find(owner, package, 
LBattrs)<BR>
     Xv_object      owner;<BR>
     Xv_pkg         package;<BR>
     &lt;<I>attribute-value 
list</I>&gt; LBattrs;<BR>
 </DD>

<DT><B>xv_get()</B> </DT>
<DD>Gets the value of a single attribute. <BR>
Xv_opaque<BR>
 
xv_get(object, LBattrs)<BR>
     Xv_object     object;<BR>
     &lt;<I>attribute-value list</I>&gt; 
LBattrs;<BR>
 </DD>

<DT><B>xv_set()</B> </DT>
<DD>Sets the value of one or more attributes. <BR>
Xv_opaque<BR>
 xv_set(object, 
LBattrs)<BR>
     Xv_object     object;<BR>
     &lt;<I>attribute-value list</I>&gt; LBattrs;<BR>
 </DD>
</DL>

<H3><A NAME="sect7" HREF="#toc7">Internationalized 
Support</A></H3>
XView now has support for internationalization. This includes locale 
setting, localized text handling, and dynamic object layout. See the  <I>XView</I> 
Programming Manual for details.  
<H3><A NAME="sect8" HREF="#toc8">Command Line Resource Arguments</A></H3>
XView-based 
applications display characteristics can be controlled by supplying command 
line  arguments to the applications at start-up.   The usage is as follows: 
<P>
<I>%</I> program -argument1 value1 -argument2 value2... <P>
In the tables below,  <B>Argument(s)</B> 
shows the short argument followed by the long argumenteither can be used. 
  <B>Type</B> describes the type of value the arguments can receive.   <B>Resource</B> 
describes the X resource name modified by the arguments. <B>Default</B> is the 
default value. <B>Description</B> describes what the arguments do. <B>Example</B> shows 
an example of a command using the argument. <P>
<P>
 
<DL>

<DT><B>Argument(s):</B> </DT>
<DD>-Wx, or -scale 
 </DD>

<DT><B>Type:</B> </DT>
<DD>string ("small", "medium", "large", "extra_large") </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Scale 
</DD>

<DT><B>Default:</B> </DT>
<DD>medium </DD>

<DT><B>Description:</B> </DT>
<DD>Sets the initial scale of the application 
(larger or smaller). <B>small </B> is 10 pixels,  <B>medium</B> is 12 pixels,  <B>large 
</B> is 14 pixels and  <B>extra_Large </B> is 19 pixels.  The font.name resource will 
override the scale.   </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -scale extra_large <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-Wt, 
-fn, or -font </DD>

<DT><B>Type:</B> </DT>
<DD>string </DD>

<DT><B>Resource:</B> </DT>
<DD>Font.Name </DD>

<DT><B>Default:</B> </DT>
<DD>lucidasans-12 </DD>

<DT><B>Description:</B> 
</DT>
<DD>Sets the name of the font used for the application.  Does not set the font 
for frame header and frame menu header. These are controlled by the window 
manager. To find out what fonts are available, use the  <B>xlsfonts</B>(1)
 command. 
If the font you specify cannot be found, you will see an error message 
such as: <P>
<I>XView warning: Cannot load font 'galant-24' (Font package)</I> <I>XView 
warning: Attempting to load font '-b&amp;h-lucida-medium-r-normal-sans-*-120-*-*-*-*-*-*' instead 
(Font package)</I> <P>
</DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -fn fixed <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-Ws, or -size </DD>

<DT><B>Type:</B> 
</DT>
<DD>integer integer </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Width and Window.Height </DD>

<DT><B>Default:</B> </DT>
<DD>depends 
on application </DD>

<DT><B>Description:</B> </DT>
<DD>Sets the width and height of the application's 
base frame.   The values are in pixels. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -Ws 400 500 <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-Ww, or -width </DD>

<DT><B>Type:</B> </DT>
<DD>int (number of columns) </DD>

<DT><B>Resource:</B> </DT>
<DD>window.columns </DD>

<DT><B>Default:</B> 
</DT>
<DD>None </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the width, in columns, of the application. 
</DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -width 40 <BR>
(starts a command tool 40 columns wide) <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-Wh, or -height </DD>

<DT><B>Type:</B> </DT>
<DD>int (number of columns) </DD>

<DT><B>Resource:</B> </DT>
<DD>window.rows </DD>

<DT><B>Default:</B> 
</DT>
<DD>None </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the height, in rows, of the application. </DD>

<DT><B>Example:</B> 
</DT>
<DD>cmdtool -height 40 <BR>
(starts a command tool 40 rows high) <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-Wp, 
or -position </DD>

<DT><B>Type:</B> </DT>
<DD>integer integer </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.X and Window.Y </DD>

<DT><B>Default:</B> 
</DT>
<DD>depends on window manager </DD>

<DT><B>Description:</B> </DT>
<DD>Sets the initial position of the 
application's base frame in pixels.  The upper left corner of the screen 
is at position (0,0), with the x-axis increasing to the left, and the y-axis 
increasing downward. These values will also be generated  by the "Save 
Workspace" option on the root menu into the  <B>$HOME/.openwin-init</B> file when 
using the Open Look Window Manager. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -Wp 100 200 <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-WG, or -geometry </DD>

<DT><B>Type:</B> </DT>
<DD>string of the format &lt;width&gt;x&lt;height&gt;{+-}&lt;xoffset&gt;{+-}&lt;yoffset&gt; 
</DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Geometry </DD>

<DT><B>Default:</B> </DT>
<DD>depends on application and window manager 
</DD>

<DT><B>Description:</B> </DT>
<DD>This sets both the size and the placement of the application's 
base frame. This option has priority over the  <B>-size </B> and  <B>-position</B> arguments. 
The size and placement parts of the value are optional. You can set just 
the size, just the position, or both. The size values are measured in pixels, 
and the position values use the same semantics as <B>-position.</B> However, if 
you use the '-' in front of an X value, it will be taken as relative to the 
right hand side of the screen, instead of the left.  Likewise, if you use 
the '-' with the Y value, it will be taken relative to the bottom of the 
screen instead of the top. </DD>

<DT><B>Examples:</B> </DT>
<DD><B>cmdtool -geometry 500x600</B> (will make 
the base frame 500x600 pixels, with the position set by the window manager) 
</DD>

<DT><B>cmdtool -WG +10+20</B> </DT>
<DD>(will make the base frame of default size with the left 
hand side of the frame 10 pixels from the left hand side of the screen, 
and the top of the frame 20 pixels from the top of the screen) </DD>

<DT><B>cmdtool 
-WG -10+20</B> </DT>
<DD>(will make the base frame of default size with the right hand 
side of the frame 10 pixels from the right hand side of the screen, and 
the top of the frame 20 pixels from the top of the screen) </DD>

<DT><B>cmdtool -geometry 
400x300-0-0</B> </DT>
<DD>(will make the base frame 400x300 pixels with the right hand 
side of the frame flush against the right hand side of the screen, and 
the bottom of the frame flush with the bottom of the screen) <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-WP, -icon_position </DD>

<DT><B>Type:</B> </DT>
<DD>integer integer </DD>

<DT><B>Resource:</B> </DT>
<DD>Icon.X Icon.Y </DD>

<DT><B>Default:</B> 
</DT>
<DD>depends on window manager </DD>

<DT><B>Description:</B> </DT>
<DD>Sets the position of the application's 
icon in pixels.  Uses the  same semantics as  <B>-position </B> for base frames. 
</DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -WP 400 20 <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-Wl, -label, or -title </DD>

<DT><B>Type:</B> </DT>
<DD>string 
</DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Header </DD>

<DT><B>Default:</B> </DT>
<DD>N/A </DD>

<DT><B>Description:</B> </DT>
<DD>Sets a default label 
for the base frame's header.  However, the application can overwrite this 
setting and display its own header.   </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -Wl "Header Text" 
<P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-Wi, and +Wi </DD>

<DT><B>Type:</B> </DT>
<DD>boolean </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Iconic </DD>

<DT><B>Default:</B> 
</DT>
<DD>+Wi </DD>

<DT><B>Description:</B> </DT>
<DD>Controls how an application will come up, open or closed 
(iconified). </DD>

<DT><B>Examples:</B> </DT>
<DD>cmdtool +Wi      (will make the cmdtool come up 
open) <BR>
cmdtool -Wi      (will make the cmdtool come up closed) <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-depth </DD>

<DT><B>Type:</B> </DT>
<DD>integer </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Depth </DD>

<DT><B>Default:</B> </DT>
<DD>Depth of server's default 
visual </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the depth of base frame. If this depth is 
not supported by the server, the default depth will be used instead. If 
this is specified in conjunction with -visual, then the exact visual will 
be used. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -depth 4 <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-visual </DD>

<DT><B>Type:</B> </DT>
<DD>string (one 
of the values: StaticGray, GrayScale, StaticColor, PseudoColor, TrueColor, 
or DirectColor). </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Visual </DD>

<DT><B>Default:</B> </DT>
<DD>Server's default visual 
</DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the visual class of the base frame. If this visual 
class is not supported by the server, the default visual class will be 
used instead. If this is specified in conjunction with -depth, then the 
exact visual will be used. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -visual StaticGray <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-Wf, or -foreground_color </DD>

<DT><B>Type:</B> </DT>
<DD>integer integer integer </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Color.Foreground 
</DD>

<DT><B>Default:</B> </DT>
<DD>0 0 0 </DD>

<DT><B>Description</B> </DT>
<DD>See Description in -Wb below. <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-Wb, 
or -background </DD>

<DT><B>Type:</B> </DT>
<DD>integer integer integer </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Color.Background 
</DD>

<DT><B>Default:</B> </DT>
<DD>255 255 255 </DD>

<DT><B>Description:</B> </DT>
<DD>These options allow the user to specify 
the foreground color (e.g., the color of the text in a textsw), or the background 
color (e.g., the color that the text is painted on) of an application.  The 
three values should be integers between 0 and 255.  They specify the amount 
of red, green and blue that is in the color.   See  <B>-fg</B> and <B>-bg</B> below for 
information on similar functions. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -Wf 0 0 255 -Wb 100 100 
100  <BR>
(would come up with a blue foreground, with a gray background) <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-fg, or -foreground </DD>

<DT><B>Type:</B> </DT>
<DD>string (color name, or hexadecimal color specification) 
</DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Color.Foreground </DD>

<DT><B>Default:</B> </DT>
<DD>black </DD>

<DT><B>Description:</B> </DT>
<DD>See Description 
in -bg below. <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-bg, or -background </DD>

<DT><B>Type:</B> </DT>
<DD>string (color name, or 
hexadecimal color specification) </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Color.Background </DD>

<DT><B>Default:</B> 
</DT>
<DD>white </DD>

<DT><B>Description:</B> </DT>
<DD>These options are similar to the -Wf and -Wb options, 
except that they take a color argument in the form of a predefined color 
name (lavender, grey, goldenrod, etc.) from <B>$OPENWINHOME/lib/rbg.txt</B>, or 
a hexadecimal representation. The hexadecimal representation is of the 
form pound sign (#) followed by the hexadecimal representation of the 
red, green and blue aspects of the color. </DD>

<DT><B>Examples:</B> </DT>
<DD>cmdtool -fg blue -bg 
gray <BR>
(comes up with a blue foreground, with a gray background) </DD>

<DT>cmdtool 
-fg #d800ff -bg white </DT>
<DD><BR>
(comes up with a purple foreground, with a white background) 
<P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-WI, or -icon_image </DD>

<DT><B>Type:</B> </DT>
<DD>string </DD>

<DT><B>Resource:</B> </DT>
<DD>Icon.Pixmap </DD>

<DT><B>Default:</B> 
</DT>
<DD>depends on application </DD>

<DT><B>Description:</B> </DT>
<DD>Sets the default filename for the 
icon's image.  However, the application can overwrite this setting and display 
its own icon image.  The file must be in XView icon format. The program 
<B>iconedit</B>(1)
 will allow one to create an image in the icon format.  Several 
icons have been provided in the directory <B>$OPENWINHOME/include/images</B>. 
 By convention, icon format files end with the suffix <B>.icon</B>. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool 
-WI <B>/usr/include/images/stop.icon</B> <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-WL, or -icon_label </DD>

<DT><B>Type:</B> </DT>
<DD>string 
</DD>

<DT><B>Resource:</B> </DT>
<DD>Icon.Footer </DD>

<DT><B>Default:</B> </DT>
<DD>depends on application </DD>

<DT><B>Description:</B> </DT>
<DD>Sets 
a default label for the base frame's icon.  However, the application can 
overwrite this setting and display its own icon label. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool 
-WL "Icon Label" <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-WT, or -icon_font </DD>

<DT><B>Type:</B> </DT>
<DD>string </DD>

<DT><B>Resource:</B> </DT>
<DD>Icon.Font.Name 
</DD>

<DT><B>Default:</B> </DT>
<DD>depends </DD>

<DT><B>Description:</B> </DT>
<DD>Sets the name of the font used for the application's 
icon. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -WT '*century schoolbook*' <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-Wd, or -default 
</DD>

<DT><B>Type:</B> </DT>
<DD>string string </DD>

<DT><B>Resource:</B> </DT>
<DD>given by the first string </DD>

<DT><B>Default:</B> </DT>
<DD>none 
</DD>

<DT><B>Description:</B> </DT>
<DD>This option allows the user to set resources that don't have 
command line equivalents.  The format is  <B>-default resource-name value .</B> The 
XView resources without specific command line arguments are  discussed 
in the following section. </DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -default OpenWindows.ScrollbarPlacement 
left <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-xrm </DD>

<DT><B>Type:</B> </DT>
<DD>string </DD>

<DT><B>Resource:</B> </DT>
<DD>given in the string </DD>

<DT><B>Default:</B> 
</DT>
<DD>none </DD>

<DT><B>Description:</B> </DT>
<DD>This option allows the user to set resources that don't 
have command line equivalents.  This is similar to the -default option, 
but it takes only one argument, a string in the form of resource-name:value. 
</DD>

<DT><B>Example:</B> </DT>
<DD>cmdtool -xrm OpenWindows.ScrollbarPlacement:right <P>
</DD>

<DT><B></B> Argument(s): 
</DT>
<DD>-WH, or -help </DD>

<DT><B>Type:</B> </DT>
<DD>none </DD>

<DT><B>Resource:</B> </DT>
<DD>none </DD>

<DT><B>Default:</B> </DT>
<DD>none </DD>

<DT><B>Description:</B> </DT>
<DD>Prints 
a description of the valid xview command line arguments for the application. 
<P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-sync or -synchronous, and +sync or +synchronous </DD>

<DT><B>Type:</B> </DT>
<DD>boolean 
</DD>

<DT><B>Resource:</B> </DT>
<DD>Window.Synchronous </DD>

<DT><B>Default:</B> </DT>
<DD>+synchronous </DD>

<DT><B>Description:</B> </DT>
<DD>These options 
allow you to make the connection that the application has with the X11 
server either synchronous (-sync) or asynchronous (+sync). <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-Wr, or -display </DD>

<DT><B>Type:</B> </DT>
<DD>string (host:display{.screen}) </DD>

<DT><B>Resource:</B> </DT>
<DD>Server.Name 
</DD>

<DT><B>Default:</B> </DT>
<DD>taken from the <B>DISPLAY</B> environment variable </DD>

<DT><B>Description:</B> </DT>
<DD>Sets 
the name of the X11 server on which to connect.   <B>host </B> is the name or 
address of the machine on whose server you have permission to display. 
<B>display </B> is a number corresponding to the  server on which to display 
for that machine, and  <B>screen </B> corresponds to which screen for the server. 
 See reference manual page on  <B>xhost</B>(1)
 for more details on adding to 
permissions list. </DD>

<DT><B>Examples:</B> </DT>
<DD>cmdtool -display foobar:0 <BR>
(will bring up a cmdtool 
on the default screen of the  display #0 of host foobar) </DD>

<DT>cmdtool -display 
foobar:0.1 </DT>
<DD><BR>
(will bring up a cmdtool on screen #1 of display #0 of host 
foobar) <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-Wdxio, or -disable_xio_error_handler </DD>

<DT><B>Type:</B> </DT>
<DD>boolean 
</DD>

<DT><B>Resource:</B> </DT>
<DD>none </DD>

<DT><B>Default:</B> </DT>
<DD>enable xio handlerthis option disables it </DD>

<DT><B>Description:</B> 
</DT>
<DD>This option is useful for debugging an application.  Whenever there is 
a fatal XIO error, the server will print an error message before exiting. 
 XView installs a error handler to keep those messages from appearing. 
 If you would like to see these messages, use this option. <P>
</DD>

<DT><B>Argument(s)</B> 
</DT>
<DD>-rv (or -reverse), and +rv (or +reverse) </DD>

<DT><B>Type:</B> </DT>
<DD>boolean </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.ReverseVideo 
</DD>

<DT><B>Default:</B> </DT>
<DD>False </DD>

<DT><B>Description:</B> </DT>
<DD>These options control whether the foreground 
and background colors of the application will be reversed.  If True, the 
foreground and background colors will be swapped.  The -rv  flag will set 
this to True, while the +rv will set it to False.  This is really only 
useful on monochrome displays. <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-name </DD>

<DT><B>Type:</B> </DT>
<DD>string </DD>

<DT><B>Resource:</B> 
</DT>
<DD>None </DD>

<DT><B>Default:</B> </DT>
<DD>argv[0] </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the instance name of the 
application. This name is  used to construct the resource name used to 
perform lookups  in the X11 Resource Manager to look for the values of 
 customizable attributes. <P>
</DD>
</DL>

<H3><A NAME="sect9" HREF="#toc9">Internationalized Command Line Resource Arguments</A></H3>
The 
following command line arguments are relevant to internationalization. 
Locale refers to the language and cultural conventions used in a program. 
Locale setting is the method by which the language and cultural environment 
of a system is set. Locale setting affects the display and manipulation 
of language-dependent features. <P>
The internationalization features that XView 
now supports include locale setting. One of the ways locale can be set 
is with command line  options. See the <I>XView</I> Programming Manual for details 
on other methods. <P>

<DL>

<DT><B>Argument(s):</B> </DT>
<DD>-lc_basiclocale </DD>

<DT><B>Type:</B> </DT>
<DD>string </DD>

<DT><B>Resource:</B> </DT>
<DD>basicLocale 
</DD>

<DT><B>Default:</B> </DT>
<DD>"C" </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the basic locale category, which sets 
the  country of the user interface. <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-lc_displaylang </DD>

<DT><B>Type:</B> </DT>
<DD>string 
</DD>

<DT><B>Resource:</B> </DT>
<DD>displayLang </DD>

<DT><B>Default:</B> </DT>
<DD>"C" </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the display 
language locale category, sets  the language in which labels, messages, 
menu items,   and help text are displayed. <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-lc_inputlang </DD>

<DT><B>Type:</B> 
</DT>
<DD>string </DD>

<DT><B>Resource:</B> </DT>
<DD>inputLang </DD>

<DT><B>Default:</B> </DT>
<DD>"C" </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the input 
language locale category, sets   the language used for keyboard input. 
<P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-lc_numeric </DD>

<DT><B>Type:</B> </DT>
<DD>string </DD>

<DT><B>Resource:</B> </DT>
<DD>numeric </DD>

<DT><B>Default:</B> </DT>
<DD>"C" </DD>

<DT><B>Description:</B> 
</DT>
<DD>Specifies the numeric locale category, which defines   the language used 
to format numeric quantities. <P>
</DD>

<DT><B>Argument(s):</B> </DT>
<DD>-lc_timeformat </DD>

<DT><B>Type:</B> </DT>
<DD>string </DD>

<DT><B>Resource:</B> 
</DT>
<DD>timeFormat </DD>

<DT><B>Default:</B> </DT>
<DD>"C" </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the time format locale 
category, which defines   the language used to format time and date. <P>
</DD>
</DL>

<H3><A NAME="sect10" HREF="#toc10">Command 
Line Options/X Resources for Debugging</A></H3>
The following switches/resources 
can be used during development to avoid the locking up of screens or other 
effects of X grabs that are done by XView. <P>
It should be noted that these 
options/resources should only be used by  developers and are not for normal 
usage. The X grabs are done for a specific reason, and are not meant to 
be customizable. Without the X grabs, certain features in XView (those 
that depend on X grabs) might not function properly. <P>

<DL>

<DT><B>Argument(s):</B> </DT>
<DD>-Wfsdb, 
or -fullscreendebug  </DD>

<DT><B>Type:</B> </DT>
<DD>boolean </DD>

<DT><B>Resource:</B> </DT>
<DD>Fullscreen.Debug </DD>

<DT><B>Default:</B> </DT>
<DD>FALSE 
</DD>

<DT><B>Description:</B> </DT>
<DD>Enables/disables fullscreen debugging mode during which X 
grabs (XGrabServer(), XGrabKeyboard(), XGrabPointer()) are not done. When 
using the fullscreen pkg, the X11 server will be grabbed which prevents 
other windows on the server from responding until the grab has been released 
by the one window which initiated the grab. Refer to Appendix F in the 
<I>XView</I> Manual: Converting SunView Applications  for further details. <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-Wfsdbs, or -fullscreendebugserver </DD>

<DT><B>Type:</B> </DT>
<DD>boolean </DD>

<DT><B>Resource:</B> </DT>
<DD>Fullscreen.Debugserver 
</DD>

<DT><B>Default:</B> </DT>
<DD>FALSE </DD>

<DT><B>Description:</B> </DT>
<DD>Enables/disables server grabbing (XGrabServer()) 
that is done via the fullscreen pkg.  Refer to the Appendix F in the <I>XView</I> 
Manual: Converting SunView Applications  for further details. <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-Wfsdbk, or -fullscreendebugkbd </DD>

<DT><B>Type:</B> </DT>
<DD>boolean </DD>

<DT><B>Resource:</B> </DT>
<DD>Fullscreen.Debugkbd 
</DD>

<DT><B>Default:</B> </DT>
<DD>FALSE </DD>

<DT><B>Description:</B> </DT>
<DD>Enables/disables keyboard grabbing (XGrabKeyboard()) 
that is done via the fullscreen pkg. Refer to the Appendix F in the <I>XView</I> 
Manual: Converting SunView Applications for further details. <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-Wfsdbp, or -fullscreendebugptr </DD>

<DT><B>Type:</B> </DT>
<DD>boolean </DD>

<DT><B>Resource:</B> </DT>
<DD>Fullscreen.Debugptr 
</DD>

<DT><B>Default:</B> </DT>
<DD>FALSE </DD>

<DT><B>Description:</B> </DT>
<DD>Enables/disables pointer grabbing (XGrabPointer()) 
that is done via the fullscreen pkg. Refer to the Appendix F in the <I>XView</I> 
Manual: Converting SunView Applications for further details. <P>
</DD>

<DT><B>Argument(s):</B> 
</DT>
<DD>-Wdpgs, or -disable_pass_grab_select </DD>

<DT><B>Type:</B> </DT>
<DD>boolean </DD>

<DT><B>Resource:</B> </DT>
<DD>Window.PassiveGrab.Select 
</DD>

<DT><B>Default:</B> </DT>
<DD>TRUE </DD>

<DT><B>Description:</B> </DT>
<DD>Disables the passive grab that is done on the 
 SELECT button. XView does a passive grab on the SELECT button to avoid 
input focus race conditions. When this passive grab is disabled, input 
focus race conditions may be seen. </DD>

<DT><B>Example:</B> </DT>
<DD>% cmdtool -disable_pass_grab_select 
<BR>
This executes a cmdtool that does not perform any  passive grabs on the 
SELECT button. To do the same thing using X resources, add the following 
entry to the X resource database: <BR>
Window.PassiveGrab.Select:False <P>
</DD>
</DL>

<H3><A NAME="sect11" HREF="#toc11">.Xdefaults 
File</A></H3>
The <B>.Xdefaults</B> file is used to store and retrieve resource settings. 
We recommend, however, that you use the command line arguments described 
above in order to change display characteristics. Changing the resources 
in the <B>.Xdefaults</B> file will modify the behaviour of the user's session.  
Novice users should not casually hand modify these settings. Before attempting 
edits to this file please read the appropriate sections of the <I>Xlib</I> Programming 
Manual on the file format and the specific properties you intend to change. 
<P>
Note that resources documented below do not have command line arguments. 
It is still possible, however, to change them without altering the <B>.Xdefaults</B> 
file.  Refer to the command line arguments  <B>-xrm </B> and  <B>-defaults </B> for instructions 
on how to to this.  Additional resources that have  command line arguments 
are documented in the previous section. For mouseless resources refer to 
the <I>XView</I> Programming Manual. <P>
The resources are documented in the following 
format: <P>

<DL>

<DT><B>Resource:</B> </DT>
<DD><I>Resource Name (</I> <I>If the resource can be modified by the 
OpenWindows Property Sheet,</I> <I>the</I> word  <B>Props</B> <I>will</I> be present.) </DD>

<DT><B>Values:</B> </DT>
<DD><I>Possible 
Values, and/or Format of Values to be Assigned to Resource </I> <B>(Default Value)</B> 
</DD>

<DT><B>Description</B> </DT>
<DD><I>Description of Resource.</I> <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>window.synchronous, +sync 
-sync </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (False) </DD>

<DT><B>Description</B> </DT>
<DD>Useful when debugging or 
tracking down a problem since the error codes emitted from Xlib will correspond 
to the immediate request made.  Running in a synchronous mode will cause 
the application  to run significantly slower. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>mouse.modifier.button2 
</DD>

<DT><B>Values:</B> </DT>
<DD>Shift, Ctrl, any valid modifier keysym (Shift) </DD>

<DT><B>Description</B> </DT>
<DD>When 
using a mouse with less than three buttons, this resource gets  an equivalent 
 mapping for the second button which is the ADJUST button on a three  
button mouse.  For more information on keysyms, see the  <B>xmodmap</B>(1)
 reference 
manual page, Xlib documentation, and the include file  <B>$OPENWINHOME/include/X11/Xkeymap.h</B>. 
<P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>mouse.modifier.button3 </DD>

<DT><B>Values:</B> </DT>
<DD>Shift, Ctrl, any valid modifier 
keysym (Ctrl) </DD>

<DT><B>Description</B> </DT>
<DD>When using a mouse with less than three buttons, 
this resource gets  an equivalent  mapping for the third button which 
is the MENU button on a three button mouse. For more information on keysyms, 
see the <B>xmodmap</B> reference manual page, Xlib documentation, and the include 
file  <B>$OPENWINHOME/include/X11/Xkeymap.h</B>. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.beep (Props) 
 </DD>

<DT><B>Values:</B> </DT>
<DD>never, notices, always (always) </DD>

<DT><B>Description</B> </DT>
<DD>When the value is 
 <B>notices, </B> the audible bell will ring only  when a notice pops up.  When 
the value is  <B>never, </B> the audible bell will never ring.  When the value 
is  <B>always, </B> the audible bell will always ring when the bell function 
is called by a program. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>alarm.visible </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (True) 
</DD>

<DT><B>Description</B> </DT>
<DD>When ringing the bell in an XView program, flash the window 
as  well to alert the user. <P>
</DD>

<DT><B></B> OpenWindows.windowColor (Props) </DT>
<DD></DD>

<DT><B>Values:</B> </DT>
<DD>any 
valid X11 color specification (#cccccc80% grey) </DD>

<DT><B>Description</B> </DT>
<DD>Specify the 
base color for control areas for 3-D look.  Takes hexadecimal  representation. 
 Three other colors used for shading and highlighting are calculated based 
upon the value of the specified control color.  The actual calculated values 
are done by the OLGX library to provide a consistent color calculation 
between XView and OLWM.  The desktop properties program allows a full range 
of customization and previews what the chosen 3-D look will look like.  
Does not apply to monochrome displays. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.workspaceColor 
(Props) </DD>

<DT><B>Values:</B> </DT>
<DD>any valid X11 color specification (#cccccc80% grey) </DD>

<DT><B>Description</B> 
</DT>
<DD>Specifies the color for the root window and the background color for icons 
that blend into the desktop. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>xview.icccmcompliant </DD>

<DT><B>Values:</B> </DT>
<DD>True, 
False (True) </DD>

<DT><B>Description</B> </DT>
<DD>When False, tells XView to set window manager 
hints in a way that was used before the ICCCM was adopted.  Useful for 
window managers that were released before X11R4.  Not needed with the Open 
Look Window Manager provided with Open Windows.  <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.3DLook.Color 
</DD>

<DT><B>Values:</B> </DT>
<DD>True, False (True on all but monochrome screens) </DD>

<DT><B>Description</B> </DT>
<DD>When 
False, do not use the 3-D look on a color or greyscale screen. <P>
</DD>

<DT><B>Resource:</B> 
</DT>
<DD>OpenWindows.dragRightDistance (Props) </DD>

<DT><B>Values:</B> </DT>
<DD>N (100) </DD>

<DT><B>Description</B> </DT>
<DD>Used 
by menus to determine when a pullright submenu would display when dragging 
over the menu item near a submenu.   <B>N </B> is an integer greater than 0.  A 
reasonable value might start at 20 and go to 200 or so.  May need to try 
different values to see what feels best to each person. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>Selection.Timeout 
</DD>

<DT><B>Values:</B> </DT>
<DD>N (3)
 </DD>

<DT><B>Description:</B> </DT>
<DD>Selection timeout value.  <B>N</B> indicates the number 
of seconds that a requestor or a selection owner waits for a  response. 
<P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.GotoMenu.RecentCount </DD>

<DT><B>Values:</B> </DT>
<DD>integer between 0 and 
15 (8) </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies the number of recently visited directories 
shown in the Go To Menu of a File Chooser. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.GotoMenu.UserDirs 
</DD>

<DT><B>Values:</B> </DT>
<DD>string-list (NULL) </DD>

<DT><B>Description:</B> </DT>
<DD>new-line (n)
 separated list of full-path 
names to directories that is added to the top of the Go To Menu of a File 
Chooser. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.KeyboardCommand.* </DD>

<DT><B>Description:</B> </DT>
<DD>These resources 
determine mouseless semantic action and its corresponding key  binding. 
Refer to the <I>XView</I> Reference Manual for a complete listing and explanation 
of the OpenWindows.KeyboardCommand.* resources. Refer to  the <I>XView</I> Programming 
Manual for information on the mouseless model. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.KeyboardCommands 
</DD>

<DT><B>Values:</B> </DT>
<DD>SunView1, Basic, or Full </DD>

<DT><B>Description:</B> </DT>
<DD>Controls the level of mouseless 
operation. All of the  OpenWindows.KeyboardCommand resource mappings may 
be modified by users, or by specifying one the the three values for OpenWindows.KeyboardCommands. 
For detailed information see the <I>XView</I> Programming Manual <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.MenuAccelerators 
</DD>

<DT><B>Values:</B> </DT>
<DD>True or False (True) </DD>

<DT><B>Description:</B> </DT>
<DD>Specifies whether or not to 
activate all keyboard  menu acceleration defined by applications. Menu 
 accelerators are keystrokes that can be used to  invoke menu commands 
directly. They can be seen on  the right side of frequently used menu items 
as a  set of keyboard qualifiers (with a graphical diamond  mark representing 
the meta key) and an accelerator  key.  <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.MouseChordMenu 
</DD>

<DT><B>Values:</B> </DT>
<DD>True, False (False) </DD>

<DT><B>Description:</B> </DT>
<DD>Turns on the mouse chording mechanism. 
Mouse chording was implemented to allow XView to work with two-button mice. 
Pressing the SELECT and the ADJUST buttons at the same time will act as 
MENU button. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.MouseChordTimeout </DD>

<DT><B>Values:</B> </DT>
<DD>N (100) </DD>

<DT><B>Description:</B> 
</DT>
<DD>Mouse chording time-out value.  <B>N</B> is in micro-seconds. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.SelectDisplaysMenu 
(Props) </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (False) </DD>

<DT><B>Description</B> </DT>
<DD>When True, the SELECT 
button (usually left mouse) will display the  menu as well as the MENU 
button (usually right mouse). <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.popupJumpCursor (Props) 
</DD>

<DT><B>Values:</B> </DT>
<DD>True, False (False) </DD>

<DT><B>Description</B> </DT>
<DD>When False, do not warp the mouse 
to the notice when it appears. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>notice.beepCount </DD>

<DT><B>Values:</B> </DT>
<DD>N (1)
 
</DD>

<DT><B>Description</B> </DT>
<DD>Where N is an integer to specify how many times to ring the 
bell when a notice appears. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.scrollbarPlacement (Props) 
 </DD>

<DT><B>Values:</B> </DT>
<DD>Left, Right (Right) </DD>

<DT><B>Description</B> </DT>
<DD>When set to  <B>Left, </B> put all scrollbars 
on the lefthand side of the window or object. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>OpenWindows.multiClickTimeout 
(Props)  </DD>

<DT><B>Values:</B> </DT>
<DD>N (4)
 </DD>

<DT><B>Description</B> </DT>
<DD>Where N is an integer greater than 
2. Set the number of tenths of a second between clicks for a multi-click. 
A click is button-down, button-up pair. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.delimiterChars </DD>

<DT><B>Values:</B> 
</DT>
<DD>string (' \011!\"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~') </DD>

<DT><B>Description</B> </DT>
<DD>This resource allows the 
user to select the delimiter characters that are used when doing word 
level selections in the XView package.  It was added because of the needs 
of the international marketplace, and it  allows the user to define the 
local delimiters for the character set that is being used with the current 
keyboard and Sun workstation. <P>
Note that the octal characters can be scrambled 
by  <B>Xrm </B> during a rewrite of the value of text.delimiter.Chars.  <B>Xrm </B> interprets 
the text.delimiterChar string when it is loaded.   Specifically it will 
decode the backslashed portions of the string and convert them to octal 
representations.  When this is passed to the client application, the logic 
will function correctly.  However, this misbehavior of  <B>Xrm</B> causes the 
string to be stored incorrectly if the user saves the <B>.Xdefaults</B> file using 
the <B>Xrm</B> content of the string. The specific problem(s) that occur are the 
stripping of the backslash characters and the expansion of the tab character 
(\011). <P>
To correct this problem, one can put the text.delimiterChar entry 
into an  <B>.Xdefaults </B> file that will not be overwritten when saving the 
workspace properties (for example, a system wide defaults file).  Or a 
copy of the text.delimiterChar entry can be inserted after <B>.Xdefaults</B> file 
saves. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>scrollbar.jumpCursor (Props) </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (True) 
</DD>

<DT><B>Description</B> </DT>
<DD>When False, the scrollbar will not move the mouse pointer 
when scrolling. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>scrollbar.repeatDelay </DD>

<DT><B>Values:</B> </DT>
<DD>N (100) </DD>

<DT><B>Description</B> 
</DT>
<DD>Where N is some integer greater than 2. Specifies the time in milliseconds 
when a click becomes a repeated action. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>scrollbar.pageInterval 
</DD>

<DT><B>Values:</B> </DT>
<DD>N (100) </DD>

<DT><B>Description</B> </DT>
<DD>Where N is some integer greater than 2. Specifies 
the time in milliseconds between repeats of a single page scroll. <P>
</DD>

<DT><B>Resource:</B> 
</DT>
<DD>scrollbar.lineInterval </DD>

<DT><B>Values:</B> </DT>
<DD>N (1)
 </DD>

<DT><B>Description</B> </DT>
<DD>Where N is some integer 
greater than 0. Specifies the time in milliseconds between repeats of a 
single line  scroll.  How long to pause scrolling when holding down the 
SELECT button on the scrollbar elevator.  Scrollbar sets up a timer routine 
for repeats. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.maxDocumentSize </DD>

<DT><B>Values:</B> </DT>
<DD>N (2000) </DD>

<DT><B>Description</B> 
</DT>
<DD>Where N specifies the bytes used in memory before a text file is saved 
to a file on disk.  Once this limit is exceeded, the text package will 
send a notice to the user to tell them that no more insertions are possible. 
 If the file being edited is saved to a file, or it is a disk file being 
edited,  then the limit does not apply. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.retained </DD>

<DT><B>Values:</B> 
</DT>
<DD>True, False (False) </DD>

<DT><B>Description</B> </DT>
<DD>If True, retain text windows with server 
backing store. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.extrasMenuFilename </DD>

<DT><B>Values:</B> </DT>
<DD>filename (<B>/usr/lib/.text_extras_menu</B>) 
</DD>

<DT><B>Description</B> </DT>
<DD>Where filename is an absolute location to a file.  Can also 
be  set via environment variable EXTRASMENU.  This file is used for the 
text package's Extras menu.  The commands specified in the extras menu are 
applied to the contents of the current selection in the textsw window 
and then it inserts the results at the current insertion point. <P>
</DD>

<DT><B>Resource:</B> 
</DT>
<DD>text.enableScrollbar </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (True) </DD>

<DT><B>Description</B> </DT>
<DD>When False, 
do not put a scrollbar on textsw objects. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.againLimit </DD>

<DT><B>Values:</B> 
</DT>
<DD>N (1)
 </DD>

<DT><B>Description</B> </DT>
<DD>Where N is an integer between 0 and 500. Number of operations 
the "again history" remembers for a textsw. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.autoIndent </DD>

<DT><B>Values:</B> 
</DT>
<DD>True, False (False) </DD>

<DT><B>Description</B> </DT>
<DD>When True, begin the next line at the 
same indentation as the previous line as typing in text. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.autoScrollBy 
</DD>

<DT><B>Values:</B> </DT>
<DD>N (1)
 </DD>

<DT><B>Description</B> </DT>
<DD>Where N is an integer between 0 and 100. Specifies 
the number of lines to scroll when type-in moves insertion point below 
the view. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.confirmOverwrite </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (True) </DD>

<DT><B>Description</B> 
</DT>
<DD>When False, do not give user confirmation if a save will overwrite an 
existing file.  <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.displayControlChars </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (True) 
</DD>

<DT><B>Description</B> </DT>
<DD>When False, use an up arrow plus a letter to display the control 
character instead of the character that is available for the current font. 
<P>
</DD>

<DT><B>Resource: </B> </DT>
<DD>Text.DeleteReplacesClipboard </DD>

<DT><B>Values: </B> </DT>
<DD>True, False (False)  </DD>

<DT><B>Description 
</B> </DT>
<DD>This resource controls whether text that has been selected and then deleted 
by the delete key or replaced by any other keystroke will be copied to 
the clipboard.  If the value is True, then the selected text will be copied 
to the clipboard. If the value is False, then the text selected does not 
replace the clipboard. <P>
This resource also applies to the text selected 
for the filter function. If the resource is True, then the text selected 
for a filter function will replace the clipboard when the filter successfully 
finishes.  If the resource is False, then the text selected does not replace 
the clipboard.   <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.undoLimit </DD>

<DT><B>Values:</B> </DT>
<DD>N  (50 maximum of 500) 
</DD>

<DT><B>Description</B> </DT>
<DD>Where N is an integer between 0 and 500. How many operations 
to save in the undo history log.  These operations will be undone when 
you press the "Undo" key in the text window. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.insertMakesCaretVisible 
</DD>

<DT><B>Values:</B> </DT>
<DD>If_auto_scroll (Always) </DD>

<DT><B>Description</B> </DT>
<DD>Controls whether insertion 
causes repositioning to make inserted text visible. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.lineBreak 
</DD>

<DT><B>Values:</B> </DT>
<DD>Clip, Wrap_char, Wrap_word (Wrap_word) </DD>

<DT><B>Description</B> </DT>
<DD>Determines 
how the textsw treats file lines when they are  too big to fit on one 
display line. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.margin.bottom </DD>

<DT><B>Values:</B> </DT>
<DD>N (0) </DD>

<DT><B>Description</B> </DT>
<DD>Where 
N is an integer between -1 and 50. Specifies the minimum number of lines 
to maintain between insertion point and bottom of view.  A value of -1 turns 
auto scrolling off. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>mouse.multiclick.space </DD>

<DT><B>Values:</B> </DT>
<DD>N (4)
 </DD>

<DT><B>Description</B> 
</DT>
<DD>Where N is an integer between 2 and 500. Specifies the maximum number of 
pixels between successive mouse clicks to still have the clicks considered 
as a multi-click event. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.storeChangesFile </DD>

<DT><B>Values:</B> </DT>
<DD>True, False 
(True) </DD>

<DT><B>Description</B> </DT>
<DD>When False, do not change the name of the current file 
being edited to the name of the file that is stored.  The name of the current 
file is reflected in the titlebar of the textedit frame. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.margin.top 
</DD>

<DT><B>Values:</B> </DT>
<DD>N (2)
 </DD>

<DT><B>Description</B> </DT>
<DD>Where N is an integer between -1 and 50. Specifies 
the minimum number of lines to maintain between the start of the selection 
and the top of the view.  A value of -1 means defeat normal actions. <P>
</DD>

<DT><B>Resource:</B> 
</DT>
<DD>text.margin.left </DD>

<DT><B>Values:</B> </DT>
<DD>N (8)
 </DD>

<DT><B>Description</B> </DT>
<DD>Where N is an integer between 
0 and 2000. Specifies the margin in pixels that the text should maintain 
between the left hand border of the window and the first character on 
each line. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.margin.right </DD>

<DT><B>Values:</B> </DT>
<DD>N (0) </DD>

<DT><B>Description</B> </DT>
<DD>Where N 
is an integer between 0 and 2000. Specifies the margin in pixels that the 
text should maintain between the right hand border of the window and the 
last character on each line. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>text.tabWidth </DD>

<DT><B>Values:</B> </DT>
<DD>N (8)
 </DD>

<DT><B>Description</B> 
</DT>
<DD>Where N is an integer between 0 and 50. Specifies the width in characters 
of the tab character. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>Text.LineSpacing </DD>

<DT><B>Values:</B> </DT>
<DD>N (0) </DD>

<DT><B>Description</B> 
</DT>
<DD>Where N is an integer which is the percentage of the  maximum height of 
a character in the Textsw window  font to use as interline spacing. Setting 
Text.LineSpacing to a nonzero positive number  will increase the size of 
a Textsw proportionally.   xv_set() of WIN_ROWS will still yield the correct 
number of rows. However, the window will be taller as compared to a Textsw 
with Text.LineSpacing set to 0. This resource allows XView to conform to 
TUV requirements.   To meet TUV requirements, set Text.LineSpacing to 15 
or  greater. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>term.boldStyle </DD>

<DT><B>Values:</B> </DT>
<DD>None, Offset_X, Offset_Y, 
Offset_X_and_Y, Offset_XY, Offset_X_and_XY,  Offset_Y_and_XY, Offset_X_and_Y_and_XY, 
Invert (Invert) </DD>

<DT><B>Description</B> </DT>
<DD>Specify the text bolding style for a terminal 
based window. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>term.inverseStyle </DD>

<DT><B>Values:</B> </DT>
<DD>Enable, Disable, Same_as_bold 
(Enable) </DD>

<DT><B>Description</B> </DT>
<DD>Specify the text inverting style for a terminal based 
window. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>term.underlineStyle </DD>

<DT><B>Values:</B> </DT>
<DD>Enable, Disable, Same_as_bold 
(Enable) </DD>

<DT><B>Description</B> </DT>
<DD>Specify the text underlining style for a terminal 
based window. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>term.useAlternateTtyswrc </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (True) 
</DD>

<DT><B>Description</B> </DT>
<DD>When True, and a <B>$HOME/.ttyswrc</B> is not found, look for an alternate 
<B>ttyswrc</B> file. When False, do not look for an alternate file is one is not 
found in the home directory, <B>$HOME/.ttyswrc</B>. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>term.alternateTtyswrc 
</DD>

<DT><B>Values:</B> </DT>
<DD>filename (<B>$XVIEWHOME/lib/.ttyswrc</B>) </DD>

<DT><B>Description</B> </DT>
<DD>Where filename specifies 
a complete filename and absolute path of  an alternate <B>ttyswrc</B> file.  This 
is only used if a <B>.ttyswrc</B> file is not found in <B>$HOME/.ttyswrc</B> and term.useAlternateTtyswrc 
is True. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>term.enableEdit </DD>

<DT><B>Values:</B> </DT>
<DD>True, False (True) </DD>

<DT><B>Description</B> 
</DT>
<DD>When False, do not keep an editlog of what has been typed into the term 
window.  This is set to false automatically when switching from a scrollable 
term to one that is not scrollable. <P>
</DD>

<DT><B>Resource:</B> </DT>
<DD>ttysw.eightBitOutput </DD>

<DT><B>Values:</B> 
</DT>
<DD>True, False (True) </DD>

<DT><B>Description</B> </DT>
<DD>This resource controls whether characters 
modified by the meta modifier are encoded as eight-bit characters when 
passed to the ttysw's pty or are delivered as seven-bit characters. <P>
</DD>

<DT><B>Resource:</B> 
</DT>
<DD>ttysw.yieldModifiers </DD>

<DT><B>Values:</B> </DT>
<DD> Meta, Alt (The default is to not remove any 
semantic meaning from any modifiers) </DD>

<DT><B>Description</B> </DT>
<DD>This resource takes as 
a value a list of modifier keys.  Any semantic meaning (mouseless command 
or keyboard accelerater) that would normally be associated with the listed 
modifiers when the keyboard focus is in  a ttysw or termsw would be removed. 
<P>
</DD>
</DL>

<H2><A NAME="sect12" HREF="#toc12">ENVIRONMENT</A></H2>
<B>$OPENWINHOME</B> is the directory in which the server's directory 
hierarchy is installed. <BR>
<B>$DISPLAY </B> is the name of the server and screen 
to which applications should display. <BR>
<B>$LD_LIBRARY_PATH </B> is the SunOS shared 
library search path. <BR>
<B>$HELPPATH </B> is the path that applications will search 
for Open Look Help files. <P>

<H2><A NAME="sect13" HREF="#toc13">FILES</A></H2>

<DL>

<DT><B>$OPENWINHOME/include/images</B> </DT>
<DD>XView images 
<P>
</DD>

<DT><B>$OPENWINHOME/lib</B> </DT>
<DD>XView Libraries <P>
</DD>

<DT><B>$OPENWINHOME/include</B> </DT>
<DD>Include files <P>
</DD>

<DT><B>$OPENWINHOME/bin</B> 
</DT>
<DD>Binaries <P>
</DD>

<DT><B>$OPENWINHOME/share/src/xview/demos</B> </DT>
<DD>XView demo programs <P>
</DD>

<DT><B>$OPENWINHOME/share/src/xview/examples</B> 
</DT>
<DD>XView example programs <P>
</DD>
</DL>

<H2><A NAME="sect14" HREF="#toc14">SEE ALSO</A></H2>
<B>openwin</B>(1)
, <B>xnews</B>(1)
, <B>xlsfonts</B>(1)
, <B>xmodmap</B>(1)
, 
<B>iconedit</B>(1)
 <P>
 <P>

<HR><P>
<A NAME="toc"><B>Table of Contents</B></A><P>
<UL>
<LI><A NAME="toc0" HREF="#sect0">NAME</A></LI>
<LI><A NAME="toc1" HREF="#sect1">SYNOPSIS</A></LI>
<LI><A NAME="toc2" HREF="#sect2">AVAILABILITY</A></LI>
<LI><A NAME="toc3" HREF="#sect3">DESCRIPTION</A></LI>
<LI><A NAME="toc4" HREF="#sect4">USAGE</A></LI>
<UL>
<LI><A NAME="toc5" HREF="#sect5">Compiling XView Programs</A></LI>
<LI><A NAME="toc6" HREF="#sect6">Generic XView Functions</A></LI>
<LI><A NAME="toc7" HREF="#sect7">Internationalized Support</A></LI>
<LI><A NAME="toc8" HREF="#sect8">Command Line Resource Arguments</A></LI>
<LI><A NAME="toc9" HREF="#sect9">Internationalized Command Line Resource Arguments</A></LI>
<LI><A NAME="toc10" HREF="#sect10">Command Line Options/X Resources for Debugging</A></LI>
<LI><A NAME="toc11" HREF="#sect11">.Xdefaults File</A></LI>
</UL>
<LI><A NAME="toc12" HREF="#sect12">ENVIRONMENT</A></LI>
<LI><A NAME="toc13" HREF="#sect13">FILES</A></LI>
<LI><A NAME="toc14" HREF="#sect14">SEE ALSO</A></LI>
</UL>
</BODY></HTML>
