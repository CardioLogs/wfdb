This is wpg, produced by makeinfo version 4.8 from wpg.tex.

INFO-DIR-SECTION Libraries
START-INFO-DIR-ENTRY
* WFDB library: (wpg).		The Waveform Database library.
END-INFO-DIR-ENTRY


File: wpg,  Node: Extensions,  Next: Sources,  Prev: WFDB Applications,  Up: Top

Appendix D Extensions
*********************

This section may be helpful if you wish to extend the capabilities of
the WFDB library, or if you wish to port it to another environment.  In
order to make use of the information in this section, you should have
the WFDB library sources (*note Sources::).  The sources are distributed
among four `include' (`.h') files and five `.c' files:

     wfdb.h         Constant and structure definitions, and function prototypes
     ecgcodes.h     Annotation codes
     ecgmap.h       Annotation code mapping macros
     wfdblib.h      External definitions for private WFDB library functions

     wfdbinit.c     Functions `wfdbinit', `wfdbquit', and `wfdbflush'
     signal.c       Functions for signals
     calib.c        Functions for signal calibration
     annot.c        Functions for annotations
     wfdbio.c       Low-level I/O and operating system-dependent functions

   The first three of these files are the standard `include' files that
are usually obtained by `#include <wfdb/FILE.h>' statements.  When
modifying the WFDB library, however, make any necessary changes in the
copies of these files that are kept in the library source directory.
Install the modified versions of the `.h' files in the system's
`include' directory after installing the modified WFDB library.

   The cleanest mechanism for adding additional fields to `hea' files is
to include them in `info' strings (*note getinfo::), rather than by
modifying the code that reads and writes `hea' files (in `signal.c').

   A common problem is the need to import signal files generated by
other software.  Often this problem can be solved by writing a format
conversion program that uses input functions provided with the other
software to read the signal files, and `putvec' to write them in one of
the formats supported by the WFDB library.  This solution is unlikely
to be satisfactory if you have many large signal files to import,
however, and you may wish to arrange for `getvec' to read the imported
files directly.  This may be done by defining a new signal file format,
as outlined below.

   To define a new format for signal files, choose a numeric code to
represent your format.  (Values between 900 and 999 are reserved for
user-defined signal file format codes.)  In `wfdb.h', add your format
code to `FMT_LIST' and increment `NFMTS'.  In `signal.c', define
functions (macros if possible for efficiency) for reading and writing
single samples; these should be named `rNNN' and `wNNN', where NNN is
your format code.  Follow the examples in `signal.c'; it will almost
certainly be easier to make use of the existing macros `r8' and `w8'
than to begin from scratch.  Add additional `case' statements in
`getvec' and `putvec', again following the existing models.  You will
also need to add a `case' in `isgsettime', including a formula to
determine the number of bytes needed per sample, given the number of
signals multiplexed.  (All currently-defined formats use fixed-length
encoding.  If you wish to implement variable-length encoding, it may be
easiest to implement an indexed-search method for `isgsettime' in such
cases.)  If the ADC resolution exceeds the number of bits in a C `int'
on your system, change the `typedef' for `WFDB_Sample' in
`<wfdb/wfdb.h>' as necessary;  be aware that this change is likely to
require additional changes to application programs (use `lint' or an
ANSI C compiler to check your code).

   Although the WFDB library generally assumes that signal files are
"pure", it is possible to read imported signal files that contain
prologs (data that precede the first sample).  To do so, you must
construct a header file in which the `format' fields encode the length
of the prolog in bytes (you can do this manually, or use
`wfdbsetstart', *note wfdbsetstart::, for this purpose).  For example,
a signal file with a 512-byte prolog followed by format 16 samples
would be specified using `16+512' in the `format' field or fields (if
the file contains more than one signal, the `format' fields for all
signals in the file must be identical).  Note that this facility is
provided only for signal file import; the WFDB library is not equipped
to create signal files with embedded prologs.

   In a similar fashion, though with substantially more effort in most
cases, you may define a new format for annotation files.  Add additional
`stat' values for reading and writing to the list in `wfdb.h'.  In
`annot.c', add additional `case' statements and code to `annopen',
`getann', `putann', and `wfdb_anclose'.  If you are designing a new
format, you may wish to specify a `magic number' with which your files
will begin, to allow `annopen' to recognize the format automatically; a
good choice of such a number is one in which the first byte is non-zero
(to distinguish it from AHA format files) and the high six bits of the
second byte are zero (to distinguish it from MIT format files).

   Some users may wish to define additional annotation codes.  An easy
and portable way to accomplish this is to use `setannstr' and
`setanndesc' within programs that create your annotation files, before
opening them using `annopen' (or `wfdbinit').  Annotation files created
in this way contain modification labels at the beginning that document
the non-standard code definitions, and that permit them to be read
properly by standard WFDB applications.  Another solution is to modify
the WFDB library.  This method has the disadvantage that all of your
applications that read annotation files must be recompiled, and they
may no longer read standard annotation files properly.  If despite this
disadvantage you prefer to modify the WFDB library, begin by defining
symbolic names and numeric values for your new codes in `ecgcodes.h'.
(Values between 42 and 49 are reserved for user-defined annotation
codes.  Unused values less than 42 may be assigned in future versions
of the WFDB library, and values greater than 49 are reserved to
indicate the presence of optional fields such as `subtyp'.)  Next,
decide how the new codes are to be mapped by `isqrs', `map1', `map2',
`mamap', and `annpos', and set the appropriate entries in each of the
code map arrays in `ecgmap.h'.  Finally, add mnemonic and descriptive
strings for the new codes in the `cstring', `astring', and `tstring'
arrays in `annot.c'.

   The modular design of the library makes it fairly easy to remove
unneeded functionality in order to conserve memory for special
applications.  The `calib.c' package is not referenced by any other
WFDB library modules.  For signal processing applications that do not
involve annotations, the entire `annot.c' package may be removed (with
trivial modifications to the functions in `wfdbinit.c').  If you wish
to add functions to the library, you will find that it will be easier to
maintain your modified version and to merge updates if you preserve the
existing arrangement of functions, which requires no global variables.
Rather than defining global variables, consider implementing query
functions (global-scope functions that read or write local variables).
If you wish to define new types of binary files, consider using the
low-level I/O routines in `wfdbio.c' for reading and writing them in a
machine-independent format.

   Porting the WFDB library to another environment is a straightforward
operation if an ANSI C compiler is available in the target environment.
Since all direct access to database files is performed using the
(private) function `wfdb_open', it is possible to include file name
translation in that function if needed, to accommodate file naming
schemes that may be imposed by the operating system or other
requirements.  If the notion of environment variables is foreign to the
target environment, `getwfdb' can be modified to read the WFDB path
from a file.  You may wish to modify the private function `wfdb_error'
(which is responsible for all error reporting from WFDB library
functions) if the `standard error output' is unavailable or inadequate
for use in the target environment.  All of these functions are
contained within `wfdbio.c'; it is unlikely that any other code will
require changes for a port.

   If you encounter errors while compiling `signal.c', you may wish to
try using the functions provided in that file as alternatives to the
standard macros `r16' and `w16'; the fully-expanded versions of these
macros are quite complex and are known to cause difficulty for at least
one (now obsolete) C compiler.  (Define the symbol `BROKEN_CC' while
compiling `signal.c' in order to obtain the function versions of `r16'
and `w16'.)  While compiling `signal.c', it may be necessary to disable
code optimization for some C compilers;  no current compilers are known
to have such limitations, however.


File: wpg,  Node: Sources,  Next: Answers,  Prev: Extensions,  Up: Top

Appendix E Sources
******************

This section is a compendium of sources for databases and related
materials that may be useful to readers of this guide.  Please send any
corrections to the author (<george@mit.edu>).

_WFDB Programmer's Guide (this guide)_
_WFDB Applications Guide_
_WAVE User's Guide_
_MIT-BIH Arrhythmia Database_
_MIT-BIH Arrhythmia Database Directory_
_MIT-BIH Polysomnographic Database_
_MIMIC Database_
_MGH/Marquette Foundation Waveform Database CD-ROMs_
_Other reference databases of physiologic signals_
_WFDB Software Package_
_W3C libwww sources_
_XView toolkit (needed for WAVE)_

          WWW: `http://www.physionet.org/'

     PhysioNet offers free access via the web to large collections of
     recorded physiologic signals and related open-source software.
     PhysioNet is a public service of the Research Resource for Complex
     Physiologic Signals, funded by the National Center for Research
     Resources of the National Institutes of Health.  The master
     PhysioNet web server is located at MIT in Cambridge, Massachusetts;
     about ten public mirrors are located elsewhere in the US and around
     the world (see `http://www.physionet.org/mirrors/' for a list).

_European ST-T Database CD-ROM_
_European ST-T Database Directory_
_VALE Database Directory_

          National Research Council (CNR) Institute of Clinical Physiology
          Dept. of Bioengineering and Medical Informatics
          via Trieste, 41
          56126 PISA, Italy

          email: <taddei@ifc.pi.cnr.it>
          telephone: +39 050 501145
          telefax: +39 050 503596

     Over half of this database has been contributed to PhysioNet (see
     above), from which it may be downloaded freely.

_Long-Term ST Database_

          Franc Jager
          Laboratory of Biomedical Computer Systems and Imaging
          University of Ljubljana
          Faculty of Computer and Information Science
          Trzaska 25
          1000 Ljubljana, Slovenia

          email: <lbcsi@fri.uni-lj.si>

     Over half of this database has been contributed to PhysioNet (see
     above), from which it may be downloaded freely.

_AHA Database for Evaluation of Ventricular Arrhythmia Detectors_

          ECRI
          5200 Butler Pike
          Plymouth Meeting, PA 19462 USA

          email: <bduffin@ecri.org>
          WWW: `http://www.ecri.org/'
          telephone: +1 610 825 6000

_American National Standard ANSI/AAMI EC38:1998, Ambulatory Electrocardiographs_
_American National Standard ANSI/AAMI EC57:1998 Testing and Reporting Performance_
_   Results of Cardiac Rhythm and ST Segment Measurement Algorithms_

          Association for the Advancement of Medical Instrumentation
          1110 N Glebe Road, Suite 220
          Arlington, VA 22201 USA

          WWW: `http://www.aami.org/'
          telephone: +1 703 525 4890
          telefax: +1 703 276 0793

_Computers in Cardiology_

          WWW: `http://www.cinc.org/'

     CinC is the major scientific meeting at which current research in
     ECG signal processing and modelling is discussed; the proceedings
     of the conference are probably the single best source of
     information in print about these topics.  CinC conferences have
     taken place annually since 1974, usually in September; in
     even-numbered years, they are usually convened in North America,
     and in Europe in odd-numbered years.  The deadline for submission
     of abstracts is 1 May each year.  Proceedings of the conferences
     are published by the IEEE, and usually appear about 3 months after
     the date of the conference.  CinC will be in Lyon in 2005 and (in
     a departure from the usual tradition) in Valencia in 2006.

_Proceedings of Computers in Cardiology (ISSN 0276-6574)_

     The Web of Science
     (`http://isi1.isiknowledge.com/portal.cgi?DestApp=WOS') includes
     abstracts published in the Proceedings of CinC since 1996.  IEEE
     members can also find complete CinC proceedings from 1988 to the
     present using IEEEXplore (`http://ieeexplore.ieee.org/'). Many
     universities provide access to these services for their students,
     faculty, and staff.  Printed volumes of CinC proceedings are
     available from:

          IEEE Customer Service
          445 Hoes Lane
          P.O. Box 1331
          Piscataway, NJ 08855-1331 USA

          email: <customer.service@ieee.org>
          WWW: `http://www.ieee.org/ieeestore/'
          telephone: 1 800 678 IEEE (USA and Canada) or +1 732 981 0060
          telefax: +1 732 981 9667

_GNU emacs_
_gcc (the GNU portable C/C++ compiler)_
_ghostscript_
_GNU tar_
_GNU gzip (free and improved replacement for `compress')_
_Larry Wall's `patch' program, with GNU revisions_
_GNU groff, gtbl, and related text formatting utilities_
_GNU info and makeinfo (standalone hypertext browser and formatter)_

          Free Software Foundation
          59 Temple Place - Suite 330
          Boston, MA 02111-1307 USA

          email: <gnu@gnu.org>
          WWW: `http://www.gnu.org/'
          telephone: +1 617 542 5942
     GNU software is included in all Linux distributions (in fact,
     since Linux is the name of the kernel only, and the largest
     component of these distributions is actually GNU software, it is
     proper to refer to them as GNU/Linux distributions).  GNU software
     for all popular (and many other) operating systems is available on
     CD-ROM or tape from the address above, and is also freely
     available by anonymous FTP from `ftp.gnu.org' and and many other
     archive sites.  Please support the FSF with a donation if you use
     GNU software.

_TeX for Unix systems_

     This software is available by anonymous FTP from CTAN
     (Comprehensive TeX Archive Network) mirrors, including
     `ftp.tex.ac.uk', `ftp.dante.de', and `ctan.tug.org'.  Many of the
     sources of GNU software (above) also make TeX, etc. available.
     CTAN is indexed on the World Wide Web (one such index is
     `http://www.ctan.org/').

     The Unix TeX distribution is also distributed on CD-ROM and in
     other tape formats by the Free Software Foundation (address above)
     and others.  It is also included with most GNU/Linux distributions
     (see below).

     Several commercial implementations of TeX for MS-DOS, MS-Windows,
     and Mac OS are widely available;  visit the web site of the TeX
     Users Group (below) for pointers.

_General information on TeX_

          TeX Users Group
          PO Box 2311
          Portland, OR 97208-2311 USA

          WWW: `http://www.tug.org/'
          email: <office@tug.org>
          telephone: +1 503 223 3960
          telefax: +1 503 223 9994

_libcurl_


          WWW: `http://curl.haxx.se/'

     The `libcurl' library is a modern and enhanced replacement for the
     `libwww' libraries (see below).  Only one of `libcurl' and
     `libwww' is needed for NETFILES support.

_W3C libwww libraries_


          WWW: `http://www.w3.org/Library/'

     The `libwww' libraries, created and maintained by the World Wide
     Web Consortium, provide the low-level functions needed to support
     the WFDB library's (optional) NETFILES capability.  The `libwww'
     libraries are also available from PhysioNet.

_X11R6 (the X Window System, Version 11, Release 6)_


          email: `xorg_info@x.org'
          WWW: `http://www.x.org/'
          telephone: +1 781 376 8200
          telefax: +1 781 376 9358

     Sources for XView are available from PhysioNet.

_GNU/Linux_
     GNU/Linux is a POSIX-compliant reimplementation of the Unix
     operating system, written by Linus Torvalds and a cast of
     thousands.  It runs on Intel 386, 486, and Pentium PCs, among
     others.  For information about GNU/Linux, visit the web site of
     the Linux Documentation Project:
          WWW: `http://www.linuxdoc.org/'

     GNU/Linux is freely available by anonymous FTP in source and
     binary form from many sites, including:
          tsx-11.mit.edu
          metalab.unc.edu
          ftp.funet.fi

     Many low-cost (typically US$10 to US$30) distributions of
     GNU/Linux on CD-ROMs are widely available.  Among the more popular
     are:

          Debian (non-commercial)

          WWW: `http://www.debian.org/'


          Gentoo (non-commercial)

          WWW: `http://www.gentoo.org/'


          MandrakeSoft S.A.
          43, rue d'Aboukir
          75002 Paris
          France

          email: <webmaster@linux-mandrake.com>
          WWW: `http://www.linux-mandrake.com/'
          telephone: +1 626 296 6290 (USA), +33(0) 1 40 41 00 41 (France)
          telefax: +1 801 765 1313


          Red Hat
          2600 Meridian Parkway
          Durham, NC 27713

          email: <orders@redhat.com>
          WWW: `http://www.redhat.com/'
          telephone: 1 888 733 4281 (USA and Canada) or +1 919 547 0012
          telefax: +1 919 547 0024


          Slackware

          email: <info@slackware.com>
          WWW: `http://www.slackware.com/'


          S.u.S.E. GmbH
          Schanzaeckerstr. 10
          D-90443 Nurnberg
          Germany

          email: <suse@suse.de>
          WWW: `http://www.suse.de/' (Germany), `http://www.suse.com/' (USA)
          telephone: +49 911 74053 31
          telefax: +49 911 7417755

_Compilers and software development systems_
     Any ANSI/ISO C compiler (or any K&R C compiler, if you still have
     one) can be used to compile the WFDB library and applications that
     use it.  Under Unix and GNU/Linux, high-quality free compilers and
     development tools are universally available and taken for granted.
     Even if you must work in the MS-Windows or MS-DOS environment,
     however, there is no reason to purchase expensive, bloated, and
     inferior proprietary compilers and software development systems,
     since there are several excellent, highly recommended, and
     completely free alternatives based on the GNU C/C++ compiler (gcc).

     Using any of these packages does not limit you to creating free
     (open source) software, although you are certainly encouraged to
     do so.  If you wish to develop and sell proprietary software using
     `gcc', this is certainly possible, with fewer and less severe
     restrictions than you will encounter if using a commercial
     compiler.

_Cygwin_
     WWW: `http://www.cygwin.com/'

     This is a freely available software development platform for
     MS-Windows 9x/NT/2000/ME/XP, based on GNU `gcc' and a large set of
     Unix utilities developed by the GNU project and ported to
     MS-Windows by Cygnus Software (now part of Red Hat, see above).
     Cygwin itself is open-source software and is highly recommended in
     preference to commercial C/C++ compilers if you must work in the
     MS-Windows environment.  The WFDB Software Package binaries
     available via PhysioNet are created using Cygwin.

_MinGW_
     WWW: `http://www.mingw.org/'

     This is another freely available software development platform for
     MS-Windows, also based on `gcc' and many of the same utilities as
     Cygwin.

_djgpp_
     WWW: `http://www.delorie.com/djgpp/'

     A freely available software development platform for MS-DOS,
     including `gcc', a free 32-bit DOS extender, and many of the same
     utilties as Cygwin and MinGW.

_Microstar DAP analog interface boards for PCs_

          Microstar Laboratories
          2265 116th Avenue N.E.
          Bellevue, WA 98004 USA

          email: <info@mstarlabs.com/>
          WWW: `http://www.mstarlabs.com/'
          telephone: +1 425 453 2345
          telefax: +1 425 453 3199

_Web browsers_

     The most popular Web browsers may be downloaded by anonymous FTP.

          Netscape
          FTP: `ftp.netscape.com'
          WWW: `http://www.netscape.com/'

          Mozilla
          FTP: `ftp.mozilla.org'
          WWW: `http://www.mozilla.org/'

          MS Internet Explorer
          FTP: `ftp.microsoft.com'
          WWW: `http://www.microsoft.com/'


File: wpg,  Node: Answers,  Next: Concept Index,  Prev: Sources,  Up: Top

Answers to Selected Exercises
*****************************

3.
     280 adu = (280 adu - (-300 adu)) / 10 adu/mmHg = 58 mmHg.

4.
     120 mmHg = 120 mmHg * 10 adu/mmHg + (- 300 adu) = 900 adu.

5.
     The range of sample values is -2048 to +2047 adu, or -174.8 to
     +234.7 mmHg.

6.
     We don't know how big `signal.dat' is, because we don't know how
     many other signals are multiplexed with the `BP' signal.  If there
     are no others, `signal.dat' is 1,500,000 bytes (`nsamp' * 1.5
     bytes/sample).  One-third of the space occupied by `signal.dat'
     could be saved if it were converted to format 8.  The maximum slew
     rate representable in format 8 is 127 adu/sample interval * 100
     sample intervals/sec / 10 adu/mmHg = 1270 mmHg/sec.

7.
     One way to save a little space is to resample the signal at 120
     Hz, and then change to format 8 (maximum slew rate = 1524
     mmHg/sec).  This can be done using `xform';  it reduces the
     storage requirement by one-fifth.

8.
     On a Unix system that supports the `graph' and `plot' commands, a
     simple solution is to write the sample numbers and values on the
     standard output in two-column ASCII format.  The plotting is then
     performed by the pipeline:
          YOUR-PROGRAM | graph | plot

11.
     Line 5 allocates storage for a pointer; in line 12, `getann' needs
     storage for the annotation structure.  `t' is declared as an `int'
     in line 7, which works on a 32-bit machine, but probably not on a
     16-bit machine.  Line 11 contains three errors (did you find all of
     them?): the first argument to `annopen' should be a character
     string, not an integer; the second argument should be a _pointer_
     to a `WFDB_Anninfo' object, not the object itself; and (as written)
     the `if' condition is satisfied only if `annopen' fails (it
     returns zero if successful).  Line 12 also contains three errors:
     the first argument to `getann' is the annotator number, but the
     first (in this case, the only) input annotator is `0', not `1'; the
     second argument to `getann' should be, but is not, a pointer to an
     allocated `WFDB_Annotation' structure; and the `while' loop
     terminates only if `getann' _succeeds_.  There are two errors in
     lines 13 and 14: `annot.time' is a long integer (unless `long' is
     equivalent to `int' on your machine, `%d' is an incorrect
     specification for printing it); and the functions `timstr' and
     `mstimstr' return pointers to static storage that is overwritten
     by each call.  If the other errors are fixed, the `printf'
     statement will print the same string twice (which one depends on
     the order of evaluation of function arguments, which may vary
     between compilers).  Having fixed all of these errors, the output
     is still incorrect, since `getann' returns rhythm and signal
     quality annotations as well as beat labels (only the latter should
     be used for calculating R-R intervals), and `t' is not
     initialized, which makes the first interval wrong in any case.  As
     for the extra credit question, the program probably produces
     nothing at all on its standard output!  If, by some miracle,
     `annopen' succeeds, it returns zero, and the body of the `if' is
     never executed.  If `annopen' simply fails, perhaps because the
     input annotation file can't be opened, `getann' also fails, and
     the program probably dumps core with an illegal memory reference
     in the `printf' statement, since `annot' hasn't been initialized.
     More likely, the program will dump core in `annopen', attempting
     to reference memory location 100.



File: wpg,  Node: Concept Index,  Next: Function and Macro Index,  Prev: Answers,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* AC-coupled signal (defined):           Glossary.            (line   7)
* AC-coupled signals:                    WFDB_Calinfo structures.
                                                              (line  38)
* access to multiple records:            Multiple Record Access.
                                                              (line   6)
* ADC (defined):                         Glossary.            (line  15)
* ADC resolution:                        WFDB_Siginfo structures.
                                                              (line  82)
* ADC resolution (defined):              Glossary.            (line  18)
* ADC zero:                              WFDB_Siginfo structures.
                                                              (line  86)
* ADC zero (defined):                    Glossary.            (line  22)
* adu <1>:                               WFDB_Siginfo structures.
                                                              (line  38)
* adu:                                   Concepts 2.          (line   6)
* adu (conversion to and from physical units): aduphys and physadu.
                                                              (line  28)
* adu (conversion to and from voltage):  aduphys and physadu. (line  52)
* adu (defined):                         Glossary.            (line  27)
* AHA annotation code:                   Mapping macros.      (line  44)
* AHA DB <1>:                            Sources.             (line  64)
* AHA DB:                                Overview.            (line   6)
* AHA DB (defined):                      Glossary.            (line  30)
* AHA format:                            AHA Format Files.    (line   6)
* AHA format (defined):                  Glossary.            (line  35)
* AHA-format annotation file:            WFDB_Anninfo structures.
                                                              (line   6)
* annotation:                            Concepts 3.          (line   6)
* annotation (canonical order) <1>:      Glossary.            (line 207)
* annotation (canonical order) <2>:      Annotation Order.    (line  16)
* annotation (canonical order) <3>:      iannclose and oannclose.
                                                              (line   6)
* annotation (canonical order) <4>:      wfdbquit.            (line   6)
* annotation (canonical order):          WFDB path.           (line  44)
* annotation (changing or deleting):     Annotation Order.    (line  36)
* annotation (defined):                  Glossary.            (line  41)
* annotation aux string <1>:             Annotation Codes.    (line  73)
* annotation aux string:                 WFDB_Annotation structures.
                                                              (line  38)
* annotation code:                       Annotation Codes.    (line  10)
* annotation code (conversion to and from string): annstr and strann.
                                                              (line   6)
* annotation code (defined):             Glossary.            (line  47)
* annotation code (legal):               Mapping macros.      (line  13)
* annotation code field:                 WFDB_Annotation structures.
                                                              (line  16)
* annotation code mapping:               Mapping macros.      (line   6)
* annotation code strings (setting):     annstr and strann.   (line  78)
* annotation comparator <1>:             Evaluation.          (line   6)
* annotation comparator:                 Applications.        (line  22)
* annotation editor:                     Applications.        (line   8)
* annotation file:                       Annotation Files.    (line   6)
* annotation file (defined):             Glossary.            (line  51)
* annotation files (opening):            annopen.             (line   6)
* annotation I/O:                        putvec.              (line  63)
* annotation location:                   Annotation Order.    (line  16)
* annotation location (defined):         Glossary.            (line 202)
* annotation order:                      Annotation Order.    (line   6)
* annotation structure:                  WFDB_Annotation structures.
                                                              (line   6)
* annotation subtype:                    WFDB_Annotation structures.
                                                              (line  23)
* annotation time:                       WFDB_Annotation structures.
                                                              (line  10)
* annotation type:                       WFDB_Annotation structures.
                                                              (line  16)
* annotations (non-sequential access):   iannsettime.         (line   6)
* annotations (reading) <1>:             ungetann.            (line   6)
* annotations (reading):                 getann.              (line   6)
* annotations (writing):                 putann.              (line   6)
* annotator:                             Concepts 3.          (line   6)
* annotator information structure:       WFDB_Anninfo structures.
                                                              (line   6)
* annotator name:                        WFDB_Anninfo structures.
                                                              (line   6)
* annotator name (defined):              Glossary.            (line  54)
* annotator number:                      WFDB_Anninfo structures.
                                                              (line  40)
* annotator number (defined):            Glossary.            (line  60)
* arguments:                             introduction to functions.
                                                              (line   6)
* atr:                                   Concepts 3.          (line   6)
* atr (defined):                         Glossary.            (line  69)
* attributes of annotators:              WFDB_Anninfo structures.
                                                              (line   6)
* attributes of signals (global):        WFDB_Siginfo structures.
                                                              (line   6)
* attributes of signals (local):         WFDB_Annotation structures.
                                                              (line   6)
* aux string (annotation) <1>:           Annotation Codes.    (line  73)
* aux string (annotation):               WFDB_Annotation structures.
                                                              (line  38)
* base counter value:                    counter conversion.  (line   5)
* base counter value (defined):          Glossary.            (line  73)
* base time (defined):                   Glossary.            (line  79)
* base time (setting):                   setbasetime.         (line   6)
* baseline:                              WFDB_Siginfo structures.
                                                              (line  93)
* baseline amplitude (defined):          Glossary.            (line  84)
* beat label:                            Concepts 3.          (line   6)
* block size:                            WFDB_Siginfo structures.
                                                              (line  75)
* buffer size (setting) <1>:             setobsize.           (line   6)
* buffer size (setting):                 setibsize.           (line   6)
* byte offset <1>:                       Glossary.            (line 328)
* byte offset <2>:                       wfdbsetstart.        (line   6)
* byte offset:                           wfdbgetstart.        (line   6)
* C++ bindings:                          other languages.     (line   6)
* calibration (retrieving):              getcal.              (line   6)
* calibration (storing):                 putcal.              (line   6)
* calibration file <1>:                  Calibration Files.   (line   6)
* calibration file:                      WFDB path.           (line  33)
* calibration file (defined):            Glossary.            (line  93)
* calibration file (reading):            calopen.             (line   6)
* calibration functions:                 calibration.         (line   6)
* calibration information structure:     WFDB_Calinfo structures.
                                                              (line   6)
* calibration list <1>:                  WFDB_Calinfo structures.
                                                              (line  43)
* calibration list:                      calibration.         (line   6)
* calibration list (defined):            Glossary.            (line  96)
* calibration list (discarding):         flushcal.            (line   6)
* calibration list (writing):            newcal.              (line   6)
* calibration pulse limits:              WFDB_Calinfo structures.
                                                              (line  33)
* calibration pulse shape:               WFDB_Calinfo structures.
                                                              (line  38)
* canonical order of annotations <1>:    Glossary.            (line 207)
* canonical order of annotations <2>:    Annotation Order.    (line   6)
* canonical order of annotations <3>:    iannclose and oannclose.
                                                              (line   6)
* canonical order of annotations <4>:    wfdbquit.            (line   6)
* canonical order of annotations:        WFDB path.           (line  44)
* CD-ROM:                                Sources.             (line  34)
* CD-ROM (defined):                      Glossary.            (line 102)
* changing an annotation:                Annotation Order.    (line  36)
* changing annotation code strings:      annstr and strann.   (line  78)
* changing sampling frequency:           setsampfreq.         (line   6)
* changing the WFDB path:                setwfdb.             (line   6)
* character devices (as signal files):   Special Files.       (line   6)
* checksum of signal file:               WFDB_Siginfo structures.
                                                              (line 114)
* closing annotation files:              iannclose and oannclose.
                                                              (line   6)
* closing WFDB files:                    wfdbquit.            (line   6)
* code (annotation):                     Annotation Codes.    (line  10)
* comparator (annotation) <1>:           Evaluation.          (line   6)
* comparator (annotation):               Applications.        (line  22)
* compiling:                             compiling.           (line   6)
* concatenating records:                 Multi-Segment Records.
                                                              (line   6)
* conversion between adus and physical units: aduphys and physadu.
                                                              (line  28)
* conversion between adus and voltage:   aduphys and physadu. (line  52)
* conversion between annotation code and string: annstr and strann.
                                                              (line   6)
* conversion between Julian date and string: datstr and strdat.
                                                              (line  10)
* conversion between time and string:    timstr and strtim.   (line  16)
* conversion functions:                  conversion.          (line   6)
* counter (base) <1>:                    Glossary.            (line  73)
* counter (base):                        counter conversion.  (line   5)
* counter frequency:                     counter conversion.  (line   5)
* counter frequency (defined):           Glossary.            (line 110)
* counter value:                         counter conversion.  (line   5)
* counter value (defined):               Glossary.            (line 119)
* creating a record:                     Example 8.           (line   6)
* creating annotation files:             annopen.             (line   6)
* creating header files <1>:             setmsheader.         (line   6)
* creating header files <2>:             setheader.           (line   6)
* creating header files:                 newheader.           (line   6)
* creating signal files <1>:             osigfopen.           (line   6)
* creating signal files:                 osigopen.            (line   6)
* cruft (in signal files) <1>:           Glossary.            (line 328)
* cruft (in signal files) <2>:           wfdbsetstart.        (line   6)
* cruft (in signal files):               wfdbgetstart.        (line   6)
* curl <1>:                              Sources.             (line 178)
* curl <2>:                              Unix installation.   (line   6)
* curl <3>:                              Glossary.            (line 276)
* curl <4>:                              NETFILES.            (line   6)
* curl <5>:                              WFDB path syntax.    (line  64)
* curl:                                  compiling.           (line  21)
* current time:                          setbasetime.         (line   6)
* Cygwin:                                Sources.             (line 290)
* database path:                         Glossary.            (line 433)
* database path (changing):              setwfdb.             (line   6)
* database path (default):               WFDB path syntax.    (line  14)
* database path (defined):               Glossary.            (line 131)
* database path (reading):               getwfdb.             (line   6)
* database path (setting):               WFDB path.           (line   6)
* database path file (indirect) <1>:     setwfdb.             (line  26)
* database path file (indirect):         WFDB path syntax.    (line  71)
* date (conversion to and from string):  datstr and strdat.   (line  10)
* DC-coupled signal (defined):           Glossary.            (line 138)
* DC-coupled signals:                    WFDB_Calinfo structures.
                                                              (line  38)
* decimation <1>:                        getvec.              (line  64)
* decimation <2>:                        getspf.              (line   6)
* decimation <3>:                        setgvmode.           (line   6)
* decimation:                            setifreq.            (line   6)
* deleting an annotation:                Annotation Order.    (line  36)
* detector (QRS) <1>:                    Signal processing.   (line  45)
* detector (QRS) <2>:                    Evaluation.          (line  43)
* detector (QRS):                        Example 10.          (line   6)
* difference format:                     WFDB_Siginfo structures.
                                                              (line  59)
* digital filter <1>:                    Signal processing.   (line  37)
* digital filter <2>:                    Example 10.          (line   6)
* digital filter <3>:                    Example 7.           (line   6)
* digital filter <4>:                    Example 6.           (line   6)
* digital filter:                        Applications.        (line  14)
* directories for WFDB files:            WFDB path.           (line   6)
* discarding calibration list:           flushcal.            (line   6)
* display scale:                         WFDB_Calinfo structures.
                                                              (line  25)
* djgpp:                                 Sources.             (line 309)
* duration of signal file:               WFDB_Siginfo structures.
                                                              (line 105)
* ECG annotation code:                   Annotation Codes.    (line  10)
* ECG waveform editor:                   Graphics.            (line  12)
* elapsed time:                          timstr and strtim.   (line  16)
* emptying calibration list:             flushcal.            (line   6)
* error suppression:                     wfdbquiet and wfdbverbose.
                                                              (line   6)
* errors:                                introduction to functions.
                                                              (line  19)
* ESC DB:                                Sources.             (line  34)
* ESC DB (defined):                      Glossary.            (line 144)
* examples:                              Examples.            (line   6)
* external identifiers (restrictions):   name restrictions.   (line   6)
* file containing WFDB path <1>:         setwfdb.             (line  26)
* file containing WFDB path:             WFDB path syntax.    (line  71)
* file names:                            Concepts 1.          (line  19)
* file types:                            Database Files.      (line  33)
* filenames of WFDB files (obtaining):   wfdbfile.            (line   6)
* filter (digital) <1>:                  Signal processing.   (line  37)
* filter (digital) <2>:                  Example 10.          (line   6)
* filter (digital) <3>:                  Example 7.           (line   6)
* filter (digital) <4>:                  Example 6.           (line   6)
* filter (digital):                      Applications.        (line  14)
* finding WFDB files:                    WFDB path.           (line   6)
* first difference:                      WFDB_Siginfo structures.
                                                              (line  59)
* fixed layout:                          Multi-Segment Records.
                                                              (line   6)
* flushing calibration list:             flushcal.            (line   6)
* flushing output annotations and samples: wfdbflush.         (line   6)
* flushing WFDB I/O:                     wfdbquit.            (line   6)
* format (annotation file):              WFDB_Anninfo structures.
                                                              (line   6)
* format (signal file):                  WFDB_Siginfo structures.
                                                              (line  59)
* Fortran bindings:                      other languages.     (line  21)
* frame (defined):                       Glossary.            (line 148)
* frame (of samples):                    Multi-Frequency Records.
                                                              (line   6)
* frame interval (defined):              Glossary.            (line 155)
* frame rate:                            WFDB_Siginfo structures.
                                                              (line  67)
* frame rate (defined):                  Glossary.            (line 162)
* frames (reading):                      getframe.            (line   6)
* frequency (counter) <1>:               Glossary.            (line 110)
* frequency (counter):                   counter conversion.  (line   5)
* frequency multiplier:                  Multi-Frequency Records.
                                                              (line   6)
* ftp:                                   NETFILES.            (line   6)
* function arguments:                    introduction to functions.
                                                              (line   6)
* function name restrictions:            name restrictions.   (line   6)
* function return codes:                 introduction to functions.
                                                              (line  19)
* functions in the WFDB library:         Functions.           (line   6)
* gain <1>:                              WFDB_Siginfo structures.
                                                              (line  38)
* gain:                                  Concepts 2.          (line   6)
* gain (defined):                        Glossary.            (line 168)
* getvec buffer size:                    setibsize.           (line   6)
* GNU emacs:                             Sources.             (line 123)
* GNU/Linux:                             Sources.             (line 207)
* hea (defined):                         Glossary.            (line 175)
* hea file:                              Header Files.        (line   6)
* header file (defined):                 Glossary.            (line 179)
* header files (creating) <1>:           setmsheader.         (line   6)
* header files (creating) <2>:           setheader.           (line   6)
* header files (creating):               newheader.           (line   6)
* header files (modifying):              setheader.           (line   6)
* header info (reading):                 getinfo.             (line   6)
* header info (writing):                 putinfo.             (line   6)
* high-resolution mode (defined):        Glossary.            (line 185)
* http:                                  NETFILES.            (line   6)
* I/O (completing):                      wfdbquit.            (line   6)
* indirect WFDB path <1>:                setwfdb.             (line  26)
* indirect WFDB path:                    WFDB path syntax.    (line  71)
* info (in header files) <1>:            putinfo.             (line   6)
* info (in header files):                getinfo.             (line   6)
* info string (defined):                 Glossary.            (line 193)
* information structure (annotator):     WFDB_Anninfo structures.
                                                              (line   6)
* information structure (signal):        WFDB_Siginfo structures.
                                                              (line   6)
* initial value of signal:               WFDB_Siginfo structures.
                                                              (line  46)
* initialization:                        selecting.           (line   6)
* input buffer size:                     setibsize.           (line   6)
* interpolation <1>:                     getvec.              (line  64)
* interpolation <2>:                     getspf.              (line   6)
* interpolation <3>:                     setgvmode.           (line   6)
* interpolation <4>:                     setifreq.            (line   6)
* interpolation:                         Recent changes.      (line 242)
* intersignal skew <1>:                  Glossary.            (line 410)
* intersignal skew <2>:                  wfdbsetskew.         (line   6)
* intersignal skew:                      wfdbgetskew.         (line   6)
* isoelectric level:                     WFDB_Siginfo structures.
                                                              (line  93)
* Julian date (conversion to and from string): datstr and strdat.
                                                              (line  10)
* label (beat):                          Concepts 3.          (line   6)
* layout segment:                        Multi-Segment Records.
                                                              (line   6)
* legal annotation code:                 Mapping macros.      (line  13)
* length of signal file:                 WFDB_Siginfo structures.
                                                              (line 105)
* libcurl <1>:                           Sources.             (line 178)
* libcurl <2>:                           Unix installation.   (line   6)
* libcurl <3>:                           Glossary.            (line 276)
* libcurl <4>:                           NETFILES.            (line   6)
* libcurl <5>:                           WFDB path syntax.    (line  64)
* libcurl:                               compiling.           (line  21)
* library functions:                     Functions.           (line   6)
* libwww <1>:                            Sources.             (line  10)
* libwww <2>:                            Unix installation.   (line   6)
* libwww <3>:                            Glossary.            (line 276)
* libwww <4>:                            NETFILES.            (line   6)
* libwww <5>:                            WFDB path syntax.    (line  64)
* libwww <6>:                            compiling.           (line  21)
* libwww:                                Recent changes.      (line 404)
* Linux:                                 Sources.             (line 207)
* loader options:                        compiling.           (line   6)
* local record:                          Piped and Local Records.
                                                              (line  22)
* local record (defined):                Glossary.            (line 197)
* location (of annotation):              Annotation Order.    (line  16)
* location (of annotations):             Glossary.            (line 202)
* low-resolution mode (defined):         Glossary.            (line 217)
* LTST DB:                               Sources.             (line  50)
* macros:                                Mapping macros.      (line   6)
* mapping annotation codes:              Mapping macros.      (line   6)
* Matlab bindings:                       other languages.     (line  58)
* MinGW:                                 Sources.             (line 302)
* MIT DB <1>:                            Sources.             (line  10)
* MIT DB:                                Overview.            (line   6)
* MIT DB (defined):                      Glossary.            (line 223)
* MIT format (defined):                  Glossary.            (line 228)
* MIT-format annotation file:            WFDB_Anninfo structures.
                                                              (line   6)
* mnemonic (annotation):                 annstr and strann.   (line   6)
* modification label:                    annstr and strann.   (line  13)
* modification label (defined):          Glossary.            (line 233)
* modifying header files:                setheader.           (line   6)
* multi-frequency record (defined):      Glossary.            (line 252)
* multi-frequency records <1>:           Multi-Frequency Records.
                                                              (line   6)
* multi-frequency records:               WFDB_Siginfo structures.
                                                              (line  67)
* multi-frequency records (reading) <1>: getspf.              (line   6)
* multi-frequency records (reading):     setgvmode.           (line   6)
* multi-segment record (defined):        Glossary.            (line 257)
* multi-segment records:                 Multi-Segment Records.
                                                              (line   6)
* multi-segment records (creating):      setmsheader.         (line   6)
* multifrequency records:                getframe.            (line   6)
* multiple record access:                Multiple Record Access.
                                                              (line   6)
* multiplexed signal file <1>:           Multiplexed Signal Files.
                                                              (line   6)
* multiplexed signal file:               WFDB_Siginfo structures.
                                                              (line  50)
* multiplexed signal file (defined):     Glossary.            (line 272)
* nested records:                        Multi-Segment Records.
                                                              (line   6)
* NETFILES <1>:                          NETFILES.            (line   6)
* NETFILES <2>:                          wfdbfile.            (line   6)
* NETFILES <3>:                          setwfdb.             (line   8)
* NETFILES <4>:                          WFDB path syntax.    (line  64)
* NETFILES <5>:                          compiling.           (line  21)
* NETFILES:                              Recent changes.      (line 397)
* NETFILES (defined):                    Glossary.            (line 276)
* nine-track tape:                       Special Files.       (line   6)
* nine-track tape (defined):             Glossary.            (line 286)
* noise stress test:                     Evaluation.          (line 106)
* noisy signals (annotating):            Annotation Codes.    (line  69)
* non-sequential access:                 non-sequential.      (line   6)
* NOTQRS (annotation code):              Annotation Codes.    (line 100)
* Octave bindings:                       other languages.     (line  58)
* opening annotation files:              annopen.             (line   6)
* opening database files:                selecting.           (line   6)
* opening signal files:                  isigopen.            (line   6)
* operating systems (supported):         Guide.               (line  72)
* order of annotations:                  Annotation Order.    (line   6)
* output buffer size:                    setobsize.           (line   6)
* oversampled signal (defined):          Glossary.            (line 298)
* oversampled signals:                   WFDB_Siginfo structures.
                                                              (line  67)
* path (database):                       WFDB path.           (line   6)
* pathnames of WFDB files (obtaining):   wfdbfile.            (line   6)
* physical unit (defined):               Glossary.            (line 302)
* physical units <1>:                    WFDB_Calinfo structures.
                                                              (line  18)
* physical units <2>:                    WFDB_Siginfo structures.
                                                              (line  31)
* physical units:                        Concepts 2.          (line   6)
* physical units (conversion to and from adus): aduphys and physadu.
                                                              (line  28)
* physical zero (defined):               Glossary.            (line 308)
* physical zero level:                   WFDB_Siginfo structures.
                                                              (line  93)
* PhysioBank:                            NETFILES.            (line  21)
* PhysioNet:                             Glossary.            (line 313)
* piped record:                          Piped and Local Records.
                                                              (line   6)
* piped record (defined):                Glossary.            (line 321)
* pipes (as WFDB files):                 Standard I/O.        (line   6)
* plotting scale:                        WFDB_Calinfo structures.
                                                              (line  25)
* pointer arguments:                     introduction to functions.
                                                              (line   6)
* programming examples:                  Examples.            (line   6)
* prolog (defined):                      Glossary.            (line 328)
* prolog (in signal files) <1>:          Glossary.            (line 328)
* prolog (in signal files) <2>:          wfdbsetstart.        (line   6)
* prolog (in signal files):              wfdbgetstart.        (line   6)
* pulse limits (calibration):            WFDB_Calinfo structures.
                                                              (line  33)
* pulse shape (calibration):             WFDB_Calinfo structures.
                                                              (line  38)
* putvec buffer size:                    setobsize.           (line   6)
* QRS annotation code:                   Mapping macros.      (line  16)
* QRS detector <1>:                      Signal processing.   (line  45)
* QRS detector <2>:                      Evaluation.          (line  43)
* QRS detector:                          Example 10.          (line   6)
* QRS label:                             Concepts 3.          (line   6)
* random access:                         non-sequential.      (line   6)
* reading 9-track tape:                  Special Files.       (line   6)
* reading annotations <1>:               ungetann.            (line   6)
* reading annotations:                   getann.              (line   6)
* reading calibration files:             calopen.             (line   6)
* reading signals <1>:                   getframe.            (line   6)
* reading signals:                       getvec.              (line   6)
* reading the WFDB path:                 getwfdb.             (line   6)
* record:                                Concepts 1.          (line   6)
* record (defined):                      Glossary.            (line 341)
* record (piped):                        Piped and Local Records.
                                                              (line   6)
* record name:                           Concepts 1.          (line   6)
* record name (defined):                 Glossary.            (line 349)
* record names (restrictions):           newheader.           (line  14)
* records (creating):                    Example 8.           (line   6)
* reference annotation file (defined):   Glossary.            (line 360)
* reference annotations:                 Concepts 3.          (line   6)
* reference point (on QRS):              WFDB_Annotation structures.
                                                              (line  10)
* resampling <1>:                        getvec.              (line  64)
* resampling <2>:                        getspf.              (line   6)
* resampling <3>:                        setgvmode.           (line   6)
* resampling <4>:                        setifreq.            (line   6)
* resampling:                            Recent changes.      (line 242)
* resolution <1>:                        Glossary.            (line  18)
* resolution:                            WFDB_Siginfo structures.
                                                              (line  82)
* restrictions on function and variable names: name restrictions.
                                                              (line   6)
* retrieving calibration data:           getcal.              (line   6)
* return codes:                          introduction to functions.
                                                              (line  19)
* sample:                                Concepts 2.          (line   6)
* sample (defined):                      Glossary.            (line 365)
* sample frame:                          Multi-Frequency Records.
                                                              (line   6)
* sample interval:                       Concepts 2.          (line   6)
* sample interval (defined):             Glossary.            (line 370)
* sample number:                         Concepts 2.          (line  24)
* sample number (defined):               Glossary.            (line 374)
* samples per frame:                     WFDB_Siginfo structures.
                                                              (line  67)
* sampling frequency <1>:                Multi-Frequency Records.
                                                              (line   6)
* sampling frequency:                    Concepts 2.          (line   6)
* sampling frequency (changing):         setsampfreq.         (line   6)
* sampling frequency (defined):          Glossary.            (line 381)
* scale (amplitude) <1>:                 WFDB_Calinfo structures.
                                                              (line  25)
* scale (amplitude):                     WFDB_Siginfo structures.
                                                              (line  31)
* scales (time and amplitude):           Concepts 2.          (line   6)
* Scilab bindings:                       other languages.     (line  58)
* selecting database records:            selecting.           (line   6)
* setting annotation code strings:       annstr and strann.   (line  78)
* signal:                                Concepts 2.          (line   6)
* signal (associating annotation with):  WFDB_Annotation structures.
                                                              (line  23)
* signal (defined):                      Glossary.            (line 387)
* signal file:                           Signal Files.        (line   6)
* signal file (defined):                 Glossary.            (line 391)
* signal file (local):                   Piped and Local Records.
                                                              (line  22)
* signal file (on tape):                 Special Files.       (line   6)
* signal file (piped):                   Piped and Local Records.
                                                              (line   6)
* signal file checksum:                  WFDB_Siginfo structures.
                                                              (line 114)
* signal file description:               WFDB_Siginfo structures.
                                                              (line  25)
* signal file format:                    WFDB_Siginfo structures.
                                                              (line  59)
* signal file length:                    WFDB_Siginfo structures.
                                                              (line 105)
* signal file name:                      WFDB_Siginfo structures.
                                                              (line  14)
* signal files (creating) <1>:           osigfopen.           (line   6)
* signal files (creating):               osigopen.            (line   6)
* signal files (opening):                isigopen.            (line   6)
* signal group <1>:                      Multiplexed Signal Files.
                                                              (line   6)
* signal group:                          WFDB_Siginfo structures.
                                                              (line  50)
* signal group (defined):                Glossary.            (line 396)
* signal group number (defined):         Glossary.            (line 402)
* signal I/O:                            signal and annotation I/O.
                                                              (line   6)
* signal information structure:          WFDB_Siginfo structures.
                                                              (line   6)
* signal number:                         WFDB_Siginfo structures.
                                                              (line 121)
* signal number (defined):               Glossary.            (line 405)
* signal type:                           WFDB_Calinfo structures.
                                                              (line  11)
* signals (non-sequential access) <1>:   isgsettime.          (line   6)
* signals (non-sequential access):       isigsettime.         (line   6)
* signals (oversampled):                 WFDB_Siginfo structures.
                                                              (line  67)
* signals (reading) <1>:                 getframe.            (line   6)
* signals (reading):                     getvec.              (line   6)
* signals (writing):                     putvec.              (line   6)
* simultaneous records:                  Multiple Record Access.
                                                              (line   6)
* skew <1>:                              wfdbsetskew.         (line   6)
* skew:                                  wfdbgetskew.         (line   6)
* skew (defined):                        Glossary.            (line 410)
* skipping through WFDB files:           non-sequential.      (line   6)
* sortann:                               Annotation Order.    (line  25)
* special files (as signal files):       Special Files.       (line   6)
* standard annotation file:              WFDB_Anninfo structures.
                                                              (line   6)
* standard I/O (as WFDB files) <1>:      Piped and Local Records.
                                                              (line   6)
* standard I/O (as WFDB files):          Standard I/O.        (line   6)
* standard time format (defined):        Glossary.            (line 429)
* standard time format (examples):       timstr and strtim.   (line  59)
* start of sample data <1>:              Glossary.            (line 328)
* start of sample data <2>:              wfdbsetstart.        (line   6)
* start of sample data:                  wfdbgetstart.        (line   6)
* storing calibration data:              putcal.              (line   6)
* string (conversion to and from annotation code): annstr and strann.
                                                              (line   6)
* string (conversion to and from Julian date): datstr and strdat.
                                                              (line  10)
* string (conversion to and from time):  timstr and strtim.   (line  16)
* structure (annotation):                WFDB_Annotation structures.
                                                              (line   6)
* structure (annotator information):     WFDB_Anninfo structures.
                                                              (line   6)
* structure (signal information):        WFDB_Siginfo structures.
                                                              (line   6)
* subtyp (in NOISE annotation):          Annotation Codes.    (line  69)
* subtype (annotation):                  WFDB_Annotation structures.
                                                              (line  23)
* suppressing errors:                    wfdbquiet and wfdbverbose.
                                                              (line   6)
* system-wide database directory (defined): Glossary.         (line 433)
* tape:                                  Concepts 1.          (line   6)
* tape (defined):                        Glossary.            (line 445)
* tape counter <1>:                      Glossary.            (line 119)
* tape counter:                          counter conversion.  (line   5)
* time:                                  Concepts 2.          (line  24)
* time (conversion to and from string):  timstr and strtim.   (line  16)
* time (defined):                        Glossary.            (line 448)
* time of annotation:                    WFDB_Annotation structures.
                                                              (line  10)
* time of day (setting):                 setbasetime.         (line   6)
* type (annotation):                     WFDB_Annotation structures.
                                                              (line  16)
* units (ADC) <1>:                       WFDB_Siginfo structures.
                                                              (line  38)
* units (ADC):                           Concepts 2.          (line   6)
* units (physical) <1>:                  WFDB_Calinfo structures.
                                                              (line  18)
* units (physical) <2>:                  WFDB_Siginfo structures.
                                                              (line  31)
* units (physical):                      Concepts 2.          (line   6)
* Unix character devices (as signal files): Special Files.    (line   6)
* unreading annotations:                 ungetann.            (line   6)
* unsorted annotation files:             Annotation Order.    (line  50)
* URL:                                   NETFILES.            (line   6)
* user-defined fields in annotation:     WFDB_Annotation structures.
                                                              (line  23)
* variable layout:                       Multi-Segment Records.
                                                              (line   6)
* variable name restrictions:            name restrictions.   (line   6)
* virtual array of annotations:          Annotation Order.    (line  16)
* voltage (conversion to and from adus): aduphys and physadu. (line  52)
* W3C libwww <1>:                        Sources.             (line  10)
* W3C libwww <2>:                        Unix installation.   (line   6)
* W3C libwww <3>:                        Glossary.            (line 276)
* W3C libwww <4>:                        NETFILES.            (line   6)
* W3C libwww <5>:                        WFDB path syntax.    (line  64)
* W3C libwww <6>:                        compiling.           (line  21)
* W3C libwww:                            Recent changes.      (line 404)
* waveform editor <1>:                   Sources.             (line  10)
* waveform editor <2>:                   Graphics.            (line  12)
* waveform editor:                       Applications.        (line   8)
* Web browser:                           Sources.             (line 327)
* WFDB (environment variable):           WFDB path.           (line   6)
* WFDB files (finding):                  WFDB path.           (line   6)
* WFDB library:                          Overview.            (line   6)
* WFDB library (compiling with):         compiling.           (line   6)
* WFDB library functions:                Functions.           (line   6)
* WFDB path <1>:                         Extensions.          (line 126)
* WFDB path <2>:                         Using.               (line  12)
* WFDB path <3>:                         Glossary.            (line 131)
* WFDB path <4>:                         NETFILES.            (line   6)
* WFDB path <5>:                         Database Files.      (line   6)
* WFDB path <6>:                         wfdbfile.            (line   6)
* WFDB path <7>:                         getwfdb.             (line   6)
* WFDB path <8>:                         setwfdb.             (line   6)
* WFDB path <9>:                         WFDB path syntax.    (line   6)
* WFDB path <10>:                        WFDB path.           (line   6)
* WFDB path:                             Recent changes.      (line 293)
* WFDB_AHA_READ:                         WFDB_Anninfo structures.
                                                              (line  28)
* WFDB_AHA_WRITE:                        WFDB_Anninfo structures.
                                                              (line  28)
* WFDB_Anninfo structure (defined):      WFDB_Anninfo structures.
                                                              (line   6)
* WFDB_Annotation structure (defined):   WFDB_Annotation structures.
                                                              (line   6)
* WFDB_Annotator (defined):              Data Types.          (line  38)
* WFDB_Calinfo structure (defined):      WFDB_Calinfo structures.
                                                              (line   6)
* WFDB_Date (defined):                   Data Types.          (line  20)
* WFDB_Frequency (defined):              Data Types.          (line  24)
* WFDB_Gain (defined):                   Data Types.          (line  28)
* WFDB_Group (defined):                  Data Types.          (line  32)
* WFDB_READ:                             WFDB_Anninfo structures.
                                                              (line  28)
* WFDB_Sample (defined):                 Data Types.          (line  10)
* WFDB_Siginfo structure (defined):      WFDB_Siginfo structures.
                                                              (line   6)
* WFDB_Signal (defined):                 Data Types.          (line  35)
* WFDB_Time (defined):                   Data Types.          (line  14)
* WFDB_WRITE:                            WFDB_Anninfo structures.
                                                              (line  28)
* WFDBANNSORT (environment variable) <1>: Annotation Order.   (line  50)
* WFDBANNSORT (environment variable):    WFDB path.           (line   6)
* WFDBCAL (environment variable) <1>:    calopen.             (line   6)
* WFDBCAL (environment variable):        WFDB path.           (line   6)
* WFDBGVMODE (environment variable) <1>: Multi-Frequency Records.
                                                              (line  49)
* WFDBGVMODE (environment variable):     WFDB path.           (line   6)
* wrappers for Fortran:                  other languages.     (line  21)
* wrappers for Matlab, Octave, or Scilab: other languages.    (line  58)
* writing 9-track tape:                  Special Files.       (line   6)
* writing annotations:                   putann.              (line   6)
* writing calibration list:              newcal.              (line   6)
* writing signals:                       putvec.              (line   6)
* X Window System:                       Sources.             (line 197)
* X11:                                   Sources.             (line 197)
* XView toolkit <1>:                     Sources.             (line  10)
* XView toolkit:                         Unix installation.   (line  16)


File: wpg,  Node: Function and Macro Index,  Next: Copying,  Prev: Concept Index,  Up: Top

Function and Macro Index
************************

For a number of entries below, the function name is followed by the
version number of the WFDB library in which the function first appeared.
Functions for which no such number appears have been present in all
numbered versions of the WFDB library.

 [index ]
* Menu:

* adumuv:                                aduphys and physadu. (line  52)
* aduphys (6.0):                         aduphys and physadu. (line  28)
* ammap:                                 Mapping macros.      (line  44)
* anndesc (5.3):                         annstr and strann.   (line   6)
* annopen:                               annopen.             (line   6)
* annpos (6.0):                          Mapping macros.      (line  27)
* annstr (5.3):                          annstr and strann.   (line   6)
* calopen (6.0):                         calopen.             (line   6)
* datstr:                                datstr and strdat.   (line  10)
* ecgstr:                                annstr and strann.   (line   6)
* flushcal (6.0):                        flushcal.            (line   6)
* getann:                                getann.              (line   6)
* getbasecount (5.2):                    counter conversion.  (line  50)
* getcal (6.0):                          getcal.              (line   6)
* getcfreq (5.2):                        counter conversion.  (line  26)
* getframe (9.0):                        getframe.            (line   6)
* getifreq (10.2.6) <1>:                 getifreq.            (line   6)
* getifreq (10.2.6):                     Recent changes.      (line 242)
* getinfo (4.0):                         getinfo.             (line   6)
* getspf (9.6):                          getspf.              (line   6)
* getvec:                                getvec.              (line   6)
* getwfdb:                               getwfdb.             (line   6)
* iannclose (9.1):                       iannclose and oannclose.
                                                              (line   6)
* iannsettime:                           iannsettime.         (line   6)
* isann:                                 Mapping macros.      (line  13)
* isgsettime:                            isgsettime.          (line   6)
* isigopen:                              isigopen.            (line   6)
* isigsettime:                           isigsettime.         (line   6)
* isqrs:                                 Mapping macros.      (line  16)
* mamap:                                 Mapping macros.      (line  44)
* map1:                                  Mapping macros.      (line  19)
* map2:                                  Mapping macros.      (line  23)
* mstimstr:                              timstr and strtim.   (line  16)
* muvadu:                                aduphys and physadu. (line  63)
* newcal (6.0):                          newcal.              (line   6)
* newheader:                             newheader.           (line   6)
* oannclose (9.1):                       iannclose and oannclose.
                                                              (line  14)
* osigfopen:                             osigfopen.           (line   6)
* osigopen:                              osigopen.            (line   6)
* physadu (6.0):                         aduphys and physadu. (line  40)
* putann:                                putann.              (line   6)
* putcal (6.0):                          putcal.              (line   6)
* putinfo (4.0):                         putinfo.             (line   6)
* putvec:                                putvec.              (line   6)
* sampfreq:                              sampfreq.            (line   6)
* sample (10.3.0):                       sample.              (line   6)
* sample_valid (10.3.0):                 sample.              (line   6)
* setanndesc (5.3):                      annstr and strann.   (line  78)
* setannpos (6.0):                       Mapping macros.      (line  33)
* setannstr (5.3):                       annstr and strann.   (line  78)
* setbasecount (5.2):                    counter conversion.  (line  62)
* setbasetime:                           setbasetime.         (line   6)
* setcfreq (5.2):                        counter conversion.  (line  39)
* setecgstr:                             annstr and strann.   (line  78)
* setgvmode (9.0):                       setgvmode.           (line   6)
* setheader (5.0):                       setheader.           (line   6)
* setibsize (5.0):                       setibsize.           (line   6)
* setifreq (10.2.6) <1>:                 getvec.              (line  64)
* setifreq (10.2.6) <2>:                 setifreq.            (line   6)
* setifreq (10.2.6):                     Recent changes.      (line 242)
* setisqrs (6.0):                        Mapping macros.      (line  33)
* setmap1 (6.0):                         Mapping macros.      (line  33)
* setmap2 (6.0):                         Mapping macros.      (line  33)
* setmsheader (9.1):                     setmsheader.         (line   6)
* setobsize (5.0):                       setobsize.           (line   6)
* setsampfreq:                           setsampfreq.         (line   6)
* setwfdb:                               setwfdb.             (line   6)
* strann (5.3):                          annstr and strann.   (line  62)
* strdat:                                datstr and strdat.   (line  21)
* strecg:                                annstr and strann.   (line  62)
* strtim:                                timstr and strtim.   (line  44)
* timstr:                                timstr and strtim.   (line  16)
* ungetann (5.3):                        ungetann.            (line   6)
* wfdberror (4.5):                       wfdberror.           (line   6)
* wfdbfile (4.3):                        wfdbfile.            (line   6)
* wfdbflush:                             wfdbflush.           (line   6)
* wfdbgetskew (9.4):                     wfdbgetskew.         (line   6)
* wfdbgetstart (9.4):                    wfdbgetstart.        (line   6)
* wfdbinit:                              wfdbinit.            (line   6)
* wfdbquiet:                             wfdbquiet and wfdbverbose.
                                                              (line   6)
* wfdbquit:                              wfdbquit.            (line   6)
* wfdbsetskew (9.4):                     wfdbsetskew.         (line   6)
* wfdbsetstart (9.4):                    wfdbsetstart.        (line   6)
* wfdbverbose (4.0):                     wfdbquiet and wfdbverbose.
                                                              (line  14)


File: wpg,  Node: Copying,  Prev: Function and Macro Index,  Up: Top

   WFDB Programmer's Guide

   Tenth Edition (revised and with additions for WFDB library version
10.3.17) 20 August 2005

   George B. Moody

   Copyright (C) 1989 - 2003 George B. Moody

   Permission is granted to make and distribute verbatim copies of this
guide provided that the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this guide under the conditions for verbatim copying and under the
conditions that follow in this paragraph.  Each copy of the resulting
derived work must contain a notice that it is a modified version of
this guide.  The notice must state which edition of this guide was the
source for the derived work, and it must credit the authors of this
guide and of the modifications.  The entire resulting derived work must
be distributed under the terms of a permission notice identical to this
one.

   Permission is granted to copy and distribute translations of this
guide into another language, under the above conditions for modified
versions.

   The author would appreciate receiving copies of any modified or
translated versions of this guide for reference purposes.


