# file: sample8.hea		G. Moody	15 February 1991
#				Last revised:	   3 May 1999

# -----------------------------------------------------------------------------
# sample8.hea: Example header file with DAP program for use with `sample'
# Copyright (C) 1999 George B. Moody
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place - Suite 330, Boston, MA 02111-1307, USA.
#
# You may contact the author by e-mail (george@mit.edu) or postal mail
# (MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,
# please visit the author's web site (http://ecg.mit.edu/).
# _____________________________________________________________________________

# This file is provided as an example of a moderately complex DAP program for
# use with the program `sample'.  The DAP program is embedded in the `info'
# strings at the end of this header file.

# Use this file with `sample' to digitize 8 signals (from the differential
# inputs) played back at twice real time.  The signals are sampled at twice
# the desired rate and decimated within the DAP's on-board DSP.

# This version uses the external clock and samples at 360 Hz per signal (1/32
# of the external clock frequency).  The external clock must be set to 11520
# Hz.  To use the internal clock, remove the line containing the statement
#   #>clock external
# If you do so, sampling will be at 86.8 microsecond intervals, yielding a
# sampling frequency of 360.023 Hz per signal, relative to real time.

# Sample using this file by:
#   sample -o sample8 -n NEW -t TIME -x 2
# where NEW is the name for the record to be created, and TIME is the length
# of the new record (e.g., "2:0:0").

sample8 8 360
test.dat 212 1000 12 0 0 0 0 zero
test.dat 212 1000 12 0 0 0 0 one
test.dat 212 1000 12 0 0 0 0 two
test.dat 212 1000 12 0 0 0 0 three
test.dat 212 1000 12 0 0 0 0 four
test.dat 212 1000 12 0 0 0 0 five
test.dat 212 1000 12 0 0 0 0 six
test.dat 212 1000 12 0 0 0 0 seven
#>; start a,b
#>reset
#>pipes p0,p1,p2,p3,p4,p5,p6,p7
#>;  lowpass taps=63 cutoff=15.3% window=Blackman
#>vector lp = (0,0,1,3,4,-2,-14,-20,-3,34,58,27,-58,-130,-94,70,246,239,-33
#>  -401,-508,-118,579,976,511,-746,-1869,-1566,866,4819,8508,10012,8508,4819
#>  866,-1566,-1869,-746,511,976,579,-118,-508,-401,-33,239,246,70,-94,-130
#>  -58,27,58,34,-3,-20,-14,-2,4,3,1,0,0)
#>idef a 8
#>clock external
#>set 0 d0
#>set 1 d1
#>set 2 d2
#>set 3 d3
#>set 4 d4
#>set 5 d5
#>set 6 d6
#>set 7 d7
#>time 86.8
#>filter(0,lp,p0,2)
#>filter(1,lp,p1,2)
#>filter(2,lp,p2,2)
#>filter(3,lp,p3,2)
#>filter(4,lp,p4,2)
#>filter(5,lp,p5,2)
#>filter(6,lp,p6,2)
#>filter(7,lp,p7,2)
#>end
#>pdef b
#>merge(p0,p1,p2,p3,p4,p5,p6,p7,$binout)
#>end
